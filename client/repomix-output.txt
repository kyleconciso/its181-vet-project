This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
app/.gitignore
app/build.gradle.kts
app/proguard-rules.pro
app/src/androidTest/java/com/group2/client/ExampleInstrumentedTest.kt
app/src/main/AndroidManifest.xml
app/src/main/java/com/group2/client/api/DogAdoptionApi.kt
app/src/main/java/com/group2/client/api/RetrofitClient.kt
app/src/main/java/com/group2/client/MainActivity.kt
app/src/main/java/com/group2/client/model/AdoptionRequest.kt
app/src/main/java/com/group2/client/model/ApiResponse.kt
app/src/main/java/com/group2/client/model/Dog.kt
app/src/main/java/com/group2/client/model/StatusUpdateRequest.kt
app/src/main/java/com/group2/client/ui/components/DogCard.kt
app/src/main/java/com/group2/client/ui/components/ErrorMessage.kt
app/src/main/java/com/group2/client/ui/components/LoadingIndicator.kt
app/src/main/java/com/group2/client/ui/navigation/NavGraph.kt
app/src/main/java/com/group2/client/ui/navigation/Screen.kt
app/src/main/java/com/group2/client/ui/screens/admin/AddEditDogScreen.kt
app/src/main/java/com/group2/client/ui/screens/admin/AdminHomeScreen.kt
app/src/main/java/com/group2/client/ui/screens/admin/AdminRequestsScreen.kt
app/src/main/java/com/group2/client/ui/screens/admin/DogDetailScreenAdmin.kt
app/src/main/java/com/group2/client/ui/screens/LoginScreen.kt
app/src/main/java/com/group2/client/ui/screens/RegisterScreen.kt
app/src/main/java/com/group2/client/ui/screens/user/DogDetailScreenUser.kt
app/src/main/java/com/group2/client/ui/screens/user/UserHomeScreen.kt
app/src/main/java/com/group2/client/ui/screens/user/UserRequestsScreen.kt
app/src/main/java/com/group2/client/ui/theme/Color.kt
app/src/main/java/com/group2/client/ui/theme/Theme.kt
app/src/main/java/com/group2/client/ui/theme/Type.kt
app/src/main/java/com/group2/client/ui/viewmodel/AdminViewModel.kt
app/src/main/java/com/group2/client/ui/viewmodel/SharedViewModel.kt
app/src/main/java/com/group2/client/ui/viewmodel/UserViewModel.kt
app/src/main/java/com/group2/client/util/constants.kt
app/src/main/res/drawable/ic_launcher_background.xml
app/src/main/res/drawable/ic_launcher_foreground.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
app/src/main/res/values/colors.xml
app/src/main/res/values/strings.xml
app/src/main/res/values/themes.xml
app/src/main/res/xml/backup_rules.xml
app/src/main/res/xml/data_extraction_rules.xml
app/src/test/java/com/group2/client/ExampleUnitTest.kt
build.gradle.kts
gradle.properties
gradle/libs.versions.toml
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
settings.gradle.kts

================================================================
Files
================================================================

================
File: .gitignore
================
*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties

================
File: app/.gitignore
================
/build

================
File: app/build.gradle.kts
================
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    namespace = "com.group2.client"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.group2.client"
        minSdk = 25
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.runtime.livedata)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)

    // Retrofit and Gson
    implementation("com.squareup.retrofit2:retrofit:2.11.0")
    implementation("com.squareup.retrofit2:converter-gson:2.11.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0") // For logging network requests

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.1")

    // Lifecycle components
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7")
    implementation("androidx.lifecycle:lifecycle-runtime-compose:2.8.7")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.8.7")

    // Coil (Image Loading)
    implementation("io.coil-kt:coil-compose:2.7.0")

    // Navigation Compose
    implementation("androidx.navigation:navigation-compose:2.7.7")
}

================
File: app/proguard-rules.pro
================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================
File: app/src/androidTest/java/com/group2/client/ExampleInstrumentedTest.kt
================
package com.group2.client

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.group2.client", appContext.packageName)
    }
}

================
File: app/src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" >
    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:usesCleartextTraffic="true"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Client"
        tools:targetApi="31" >
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.Client" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

================
File: app/src/main/java/com/group2/client/api/DogAdoptionApi.kt
================
// client/app/src/main/java/com/group2/client/api/DogAdoptionApi.kt
package com.group2.client.api

import com.group2.client.model.AdoptionRequest
import com.group2.client.model.Dog
import com.group2.client.model.StatusUpdateRequest // Import
import retrofit2.Response
import retrofit2.http.*
import com.group2.client.model.ApiResponse

interface DogAdoptionApi {

    @GET("/api/dogs")
    suspend fun getAllDogs(): Response<ApiResponse<List<Dog>>>

    @GET("/api/dogs/available")
    suspend fun getAvailableDogs(): Response<ApiResponse<List<Dog>>>

    @GET("/api/dogs/{id}")
    suspend fun getDogById(@Path("id") dogId: Long): Response<ApiResponse<Dog>>

    @POST("/api/dogs")
    suspend fun createDog(@Body dog: Dog): Response<ApiResponse<Dog>>

    @PUT("/api/dogs/{id}")
    suspend fun updateDog(@Path("id") dogId: Long, @Body dog: Dog): Response<ApiResponse<Dog>>

    @DELETE("/api/dogs/{id}")
    suspend fun deleteDog(@Path("id") dogId: Long): Response<ApiResponse<Unit>>

    @POST("/api/requests")
    suspend fun createAdoptionRequest(@Body request: AdoptionRequest): Response<ApiResponse<AdoptionRequest>>

    @GET("/api/requests/all")
    suspend fun getAllAdoptionRequests(): Response<ApiResponse<List<AdoptionRequest>>>

    @GET("/api/requests/user/{userId}")
    suspend fun getAdoptionRequestsByUserId(@Path("userId") userId: Int): Response<ApiResponse<List<AdoptionRequest>>>

    @GET("/api/requests/{id}")
    suspend fun getAdoptionRequestById(@Path("id") requestId: Int): Response<ApiResponse<AdoptionRequest>>

    @PUT("/api/requests/{id}/status")
    suspend fun updateAdoptionRequestStatus(
        @Path("id") requestId: Int,
        @Body statusUpdate: StatusUpdateRequest // Use StatusUpdateRequest
    ): Response<ApiResponse<AdoptionRequest>>

    @POST("/api/auth/login")
    suspend fun login(@Body credentials: Map<String, String>): Response<ApiResponse<Map<String, Any>>>

    @POST("/api/auth/register")
    suspend fun register(@Body userData: Map<String, String>): Response<ApiResponse<Void>>
}

================
File: app/src/main/java/com/group2/client/api/RetrofitClient.kt
================
// client/app/src/main/java/com/group2/client/api/RetrofitClient.kt
package com.group2.client.api

import com.group2.client.util.Constants
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import okhttp3.Credentials // Import Credentials

object RetrofitClient {

    private var username = ""
    private var password = ""
    // No token needed for basic auth

    fun setCredentials(user: String, pass: String) {
        username = user
        password = pass
        // No need to reset a token
    }

    fun clearCredentials() {
        username = ""
        password = ""
        // No token to clear
    }

    private val okHttpClient = OkHttpClient.Builder()
        .addInterceptor { chain ->
            val original = chain.request()

            val requestBuilder = original.newBuilder().apply {
                // Always use Basic Auth if credentials are set
                if (username.isNotEmpty() && password.isNotEmpty()) {
                    header("Authorization", Credentials.basic(username, password))
                }
            }
                .method(original.method, original.body)

            val request = requestBuilder.build()
            chain.proceed(request)
        }
        .addInterceptor(HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY // Add logging interceptor
        })
        .build()

    val instance: DogAdoptionApi by lazy {
        val retrofit = Retrofit.Builder()
            .baseUrl(Constants.BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        retrofit.create(DogAdoptionApi::class.java)
    }
}

================
File: app/src/main/java/com/group2/client/MainActivity.kt
================
package com.group2.client

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import com.group2.client.ui.navigation.NavGraph
import com.group2.client.ui.theme.ClientTheme
import androidx.lifecycle.viewmodel.compose.viewModel
import com.group2.client.ui.viewmodel.SharedViewModel // Import SharedViewModel
import com.group2.client.ui.viewmodel.AdminViewModel
import com.group2.client.ui.viewmodel.UserViewModel


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ClientTheme {
                // Instantiate the SharedViewModel using viewModel()
                val sharedViewModel: SharedViewModel = viewModel()
                val adminViewModel: AdminViewModel = viewModel()
                val userViewModel: UserViewModel = viewModel()
                NavGraph(sharedViewModel = sharedViewModel, adminViewModel, userViewModel)
            }
        }
    }
}

================
File: app/src/main/java/com/group2/client/model/AdoptionRequest.kt
================
//AdoptionRequest model
package com.group2.client.model

import com.google.gson.annotations.SerializedName
import java.time.LocalDateTime

data class AdoptionRequest(
    @SerializedName("id") val id: Int? = null, // ID can be null when creating a new request, Change to Int
    @SerializedName("dogId") val dogId: Int, // Change to Int
    @SerializedName("userId") val userId: Int, // Change to Int
    @SerializedName("requestDate") val requestDate: String? = null,
    @SerializedName("status") val status: String? = null,
    @SerializedName("userEmail") val userEmail: String,
)

================
File: app/src/main/java/com/group2/client/model/ApiResponse.kt
================
package com.group2.client.model

data class ApiResponse<T>(
    val success: Boolean,
    val message: String? = null,
    val data: T? = null
)

================
File: app/src/main/java/com/group2/client/model/Dog.kt
================
// client/app/src/main/java/com/group2/client/model/Dog.kt
package com.group2.client.model

import com.google.gson.annotations.SerializedName

data class Dog(
    @SerializedName("id") val id: Int? = null, // Make id nullable
    @SerializedName("name") val name: String,
    @SerializedName("breed") val breed: String,
    @SerializedName("age") val age: Int,
    @SerializedName("gender") val gender: String,
    @SerializedName("description") val description: String,
    @SerializedName("imageUrl") val imageUrl: String,
    @SerializedName("available") val isAvailable: Boolean
)

================
File: app/src/main/java/com/group2/client/model/StatusUpdateRequest.kt
================
// client/app/src/main/java/com/group2/client/model/StatusUpdateRequest.kt
package com.group2.client.model

import com.google.gson.annotations.SerializedName

data class StatusUpdateRequest(
    @SerializedName("status") val status: String
)

================
File: app/src/main/java/com/group2/client/ui/components/DogCard.kt
================
package com.group2.client.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.group2.client.model.Dog
import coil.compose.AsyncImage

@Composable
fun DogCard(dog: Dog, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable(onClick = onClick), // Use clickable modifier here
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            AsyncImage( //Use Async
                model = dog.imageUrl,
                contentDescription = "Dog Image",
                modifier = Modifier
                    .size(80.dp)
                    .padding(end = 16.dp)
            )
            Column {
                Text(text = dog.name, style = MaterialTheme.typography.headlineSmall)
                Text(text = dog.breed, style = MaterialTheme.typography.bodyMedium)
            }
        }
    }
}

================
File: app/src/main/java/com/group2/client/ui/components/ErrorMessage.kt
================
// client/app/src/main/java/com/group2/client/ui/components/ErrorMessage.kt
package com.group2.client.ui.components

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun ErrorMessage(message: String) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = message,
            color = MaterialTheme.colorScheme.error,
            style = MaterialTheme.typography.bodyMedium
        )
    }
}

================
File: app/src/main/java/com/group2/client/ui/components/LoadingIndicator.kt
================
// client/app/src/main/java/com/group2/client/ui/components/LoadingIndicator.kt
package com.group2.client.ui.components

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier

@Composable
fun LoadingIndicator() {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        CircularProgressIndicator()
    }
}

================
File: app/src/main/java/com/group2/client/ui/navigation/NavGraph.kt
================
// client/app/src/main/java/com/group2/client/ui/navigation/NavGraph.kt (Modified)
package com.group2.client.ui.navigation

import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.group2.client.ui.screens.LoginScreen
import androidx.lifecycle.viewmodel.compose.viewModel
import com.group2.client.ui.viewmodel.SharedViewModel // Import SharedViewModel
import com.group2.client.ui.screens.admin.AdminHomeScreen
import com.group2.client.ui.viewmodel.AdminViewModel
import com.group2.client.ui.screens.user.UserHomeScreen
import com.group2.client.ui.viewmodel.UserViewModel
import androidx.navigation.NavType
import androidx.navigation.navArgument
import com.group2.client.ui.screens.user.DogDetailScreenUser
import com.group2.client.ui.screens.admin.AddEditDogScreen
import com.group2.client.ui.screens.admin.DogDetailScreenAdmin
import com.group2.client.ui.screens.RegisterScreen
import com.group2.client.ui.screens.admin.AdminRequestsScreen // Import
import com.group2.client.ui.screens.user.UserRequestsScreen


@Composable
fun NavGraph(
    sharedViewModel: SharedViewModel = viewModel(),
    adminViewModel: AdminViewModel = viewModel(),
    userViewModel: UserViewModel = viewModel(),
) {
    val navController = rememberNavController()
    val isLoggedIn: Boolean by sharedViewModel.isLoggedIn.observeAsState(false)
    val userRole by sharedViewModel.userRole.observeAsState()

    // Pass the UserViewModel instance to the SharedViewModel
    sharedViewModel.setUserViewModel(userViewModel)

    NavHost(navController = navController, startDestination = Screen.Login.route) {
        composable(Screen.Login.route) {
            if (isLoggedIn) {
                if (userRole == "ADMIN") {
                    navController.navigate(Screen.AdminHome.route) {
                        popUpTo(Screen.Login.route) { inclusive = true }
                    }
                } else {
                    navController.navigate(Screen.UserHome.route) {
                        popUpTo(Screen.Login.route) { inclusive = true }
                    }
                }
            } else {
                LoginScreen(navController = navController, sharedViewModel = sharedViewModel)
            }
        }
        composable(Screen.UserHome.route) {
            UserHomeScreen(navController = navController, userViewModel = userViewModel, sharedViewModel = sharedViewModel)
        }
        composable(
            route = Screen.DogDetailUser.route,
            arguments = listOf(navArgument("dogId") { type = NavType.LongType })
        ) { backStackEntry ->
            val dogId = backStackEntry.arguments?.getLong("dogId") ?: -1L
            DogDetailScreenUser(dogId = dogId, navController = navController, userViewModel = userViewModel)
        }
        composable(Screen.AdminHome.route) {
            AdminHomeScreen(navController = navController, adminViewModel = adminViewModel, sharedViewModel = sharedViewModel)
        }
        composable(
            route = Screen.AddEditDog.route,
            arguments = listOf(navArgument("dogId") { type = NavType.LongType })
        ) { backStackEntry ->
            val dogId = backStackEntry.arguments?.getLong("dogId") ?: -1L
            AddEditDogScreen(dogId = dogId, navController = navController, adminViewModel = adminViewModel)
        }
        composable(
            route = Screen.DogDetailAdmin.route,
            arguments = listOf(navArgument("dogId") { type = NavType.LongType })
        ) {backStackEntry ->
            val dogId = backStackEntry.arguments?.getLong("dogId") ?: -1L
            DogDetailScreenAdmin(dogId = dogId, navController = navController, adminViewModel = adminViewModel)
        }
        composable(Screen.Register.route) {
            RegisterScreen(navController = navController, sharedViewModel = sharedViewModel)
        }
        composable(Screen.AdminRequests.route) {
            AdminRequestsScreen(adminViewModel = adminViewModel)
        }
        composable(Screen.UserRequests.route) { // NEW: Route for user requests
            UserRequestsScreen(userViewModel = userViewModel)
        }
    }
}

================
File: app/src/main/java/com/group2/client/ui/navigation/Screen.kt
================
// client/app/src/main/java/com/group2/client/ui/navigation/Screen.kt (Modified)
package com.group2.client.ui.navigation

sealed class Screen(val route: String) {
    object Login : Screen("login")
    object UserHome : Screen("user_home")
    object DogDetailUser : Screen("dog_detail_user/{dogId}") {
        fun createRoute(dogId: Long) = "dog_detail_user/$dogId"
    }
    object AdminHome : Screen("admin_home")
    object AddEditDog : Screen("add_edit_dog/{dogId}"){
        fun createRoute(dogId: Long) = "add_edit_dog/$dogId"
    }
    object DogDetailAdmin : Screen("dog_detail_admin/{dogId}"){
        fun createRoute(dogId: Long) = "dog_detail_admin/$dogId"
    }

    object Register : Screen("register") // Add a new screen for registration
    object AdminRequests : Screen("admin_requests") // Add the new screen
    object UserRequests : Screen("user_requests") // NEW: User requests screen
}

================
File: app/src/main/java/com/group2/client/ui/screens/admin/AddEditDogScreen.kt
================
// client/app/src/main/java/com/group2/client/ui/screens/admin/AddEditDogScreen.kt

package com.group2.client.ui.screens.admin

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.api.RetrofitClient
import com.group2.client.model.Dog
import com.group2.client.ui.viewmodel.AdminViewModel
import kotlinx.coroutines.launch
import androidx.compose.runtime.livedata.observeAsState // Correct import


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddEditDogScreen(dogId: Long, navController: NavController, adminViewModel: AdminViewModel) {
    val coroutineScope = rememberCoroutineScope()
    // Initialize with a null id for new dogs, or fetch existing dog data
    var dog by remember { mutableStateOf(Dog(null, "", "", 0, "", "", "", true)) }
    var isLoading by remember { mutableStateOf(false) }
    var isEditMode by remember{ mutableStateOf(false)}
    val error by adminViewModel.error.observeAsState()

    LaunchedEffect(dogId) {
        if (dogId != -1L) {
            isLoading = true
            isEditMode = true;
            coroutineScope.launch {
                try {
                    val response = RetrofitClient.instance.getDogById(dogId)
                    if (response.isSuccessful) {
                        // If successful, update the `dog` state with the fetched data
                        response.body()?.data?.let{
                            dog = it.copy(id = it.id) // Ensure you're using Int? correctly
                        }
                    } else {
                        adminViewModel.getAllDogs() // Consider more specific error handling
                        println("Error fetching dog: ${response.message()}")
                    }
                } catch (e: Exception) {
                    println("Network error: ${e.localizedMessage}")
                } finally {
                    isLoading = false
                }
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text(if (isEditMode) "Edit Dog" else "Add Dog") })
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding)){
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    if (isLoading) {
                        CircularProgressIndicator()
                    } else {
                        error?.let {
                            Text(it, color = MaterialTheme.colorScheme.error)
                            Spacer(modifier = Modifier.height(8.dp))
                        }
                        OutlinedTextField(
                            value = dog.name,
                            onValueChange = { dog = dog.copy(name = it) },
                            label = { Text("Name") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.breed,
                            onValueChange = { dog = dog.copy(breed = it) },
                            label = { Text("Breed") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.age.toString(),
                            onValueChange = { dog = dog.copy(age = it.toIntOrNull() ?: 0) },
                            label = { Text("Age") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.gender,
                            onValueChange = { dog = dog.copy(gender = it) },
                            label = { Text("Gender") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.description,
                            onValueChange = { dog = dog.copy(description = it) },
                            label = { Text("Description") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.imageUrl,
                            onValueChange = { dog = dog.copy(imageUrl = it) },
                            label = { Text("Image URL") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Checkbox(
                                checked = dog.isAvailable,
                                onCheckedChange = { dog = dog.copy(isAvailable = it) }
                            )
                            Text("Available")
                        }

                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            isLoading = true
                            coroutineScope.launch {
                                if (isEditMode) {
                                    // Ensure we send the correct ID for updates
                                    dog.id?.let{
                                        adminViewModel.updateDog(dog.copy(id= it))

                                    }
                                } else {
                                    adminViewModel.createDog(dog)
                                }
                                navController.popBackStack()
                                isLoading = false
                            }

                        }) {
                            Text(if (isEditMode) "Update Dog" else "Add Dog")
                        }
                    }
                }
            }
        }
    )
}

================
File: app/src/main/java/com/group2/client/ui/screens/admin/AdminHomeScreen.kt
================
// client/app/src/main/java/com/group2/client/ui/screens/admin/AdminHomeScreen.kt
package com.group2.client.ui.screens.admin

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ExitToApp
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ExitToApp
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.ui.components.DogCard
import com.group2.client.ui.navigation.Screen
import com.group2.client.ui.viewmodel.AdminViewModel
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import com.group2.client.ui.viewmodel.SharedViewModel
import androidx.compose.runtime.LaunchedEffect
import com.group2.client.model.Dog
import androidx.compose.ui.Alignment


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AdminHomeScreen(navController: NavController, adminViewModel: AdminViewModel, sharedViewModel: SharedViewModel){
    val dogs: List<Dog> by adminViewModel.dogs.observeAsState(initial = emptyList())
    val error: String? by adminViewModel.error.observeAsState(initial = null)
    val loading: Boolean by adminViewModel.loading.observeAsState(false)

    val username by sharedViewModel.username.observeAsState() // Get username


    // Fetch all dogs when the screen is created
    LaunchedEffect(Unit) {
        adminViewModel.getAllDogs()
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(text = if(username != null) "Welcome, $username" else "Admin Home") },
                actions = {
                    IconButton(onClick = {
                        sharedViewModel.logout()
                        navController.navigate(Screen.Login.route) {
                            popUpTo(navController.graph.startDestinationId) {
                                inclusive = true
                            }
                        }
                    }) {
                        Icon(imageVector = Icons.AutoMirrored.Filled.ExitToApp, contentDescription = "Logout")
                    }
                }
            )
        },
        floatingActionButton = {
            //Add request button and add dog button, horizontally
            Row(
                horizontalArrangement = Arrangement.spacedBy(16.dp), // Space between buttons
            ) {
                FloatingActionButton(onClick = { navController.navigate(Screen.AdminRequests.route) }) {
                    Text("Requests") // Text instead of an icon
                }
                FloatingActionButton(onClick = { navController.navigate(Screen.AddEditDog.createRoute(-1L)) }) {
                    Icon(Icons.Filled.Add, contentDescription = "Add Dog")
                }
            }

        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding).fillMaxSize(), contentAlignment = Alignment.Center){ // Center content
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                ) {
                    if (loading) {
                        CircularProgressIndicator()
                    } else {
                        error?.let {
                            Text(text = it, color = MaterialTheme.colorScheme.error)
                        }

                        if (dogs.isEmpty()) {
                            Text("No dogs found.")
                        } else {
                            LazyColumn {
                                items(dogs) { dog ->
                                    DogCard(dog = dog) {
                                        dog.id?.let{
                                            navController.navigate(Screen.DogDetailAdmin.createRoute(it.toLong()))
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }
    )
}

================
File: app/src/main/java/com/group2/client/ui/screens/admin/AdminRequestsScreen.kt
================
// client/app/src/main/java/com/group2/client/ui/screens/admin/AdminRequestsScreen.kt

package com.group2.client.ui.screens.admin

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.group2.client.model.AdoptionRequest
import com.group2.client.ui.viewmodel.AdminViewModel
import androidx.compose.runtime.LaunchedEffect // Import LaunchedEffect

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AdminRequestsScreen(adminViewModel: AdminViewModel) {
    val requests: List<AdoptionRequest> by adminViewModel.requests.observeAsState(initial = emptyList())
    val error: String? by adminViewModel.error.observeAsState()
    val loading: Boolean by adminViewModel.loading.observeAsState(false)

    // Use LaunchedEffect to fetch requests when the screen is displayed
    LaunchedEffect(Unit) {
        adminViewModel.getAllAdoptionRequests()
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("Adoption Requests") })
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding).fillMaxSize(), contentAlignment = Alignment.Center) {
                if (loading) {
                    CircularProgressIndicator()
                } else {
                    error?.let {
                        Text(text = it, color = MaterialTheme.colorScheme.error)
                    }
                    if (requests.isEmpty()) {
                        Text("No adoption requests found.")
                    } else {
                        LazyColumn {
                            items(requests) { request ->
                                RequestItem(request = request, adminViewModel = adminViewModel)
                            }
                        }
                    }
                }
            }
        }
    )
}


@Composable
fun RequestItem(request: AdoptionRequest, adminViewModel: AdminViewModel) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = "Dog ID: ${request.dogId}", style = MaterialTheme.typography.titleMedium)
            Text(text = "User ID: ${request.userId}")
            Text(text = "Request Date: ${request.requestDate}")
            Text(text = "Status: ${request.status}")
            Spacer(modifier = Modifier.height(8.dp))

            // Buttons to update the status
            Row {
                Button(
                    onClick = {
                        request.id?.let { // Safely use the request ID
                            adminViewModel.updateRequestStatus(it, "APPROVED")
                        }
                    },
                    enabled = request.status != "APPROVED" // Disable if already approved
                ) {
                    Text("Approve")
                }
                Spacer(modifier = Modifier.width(8.dp))
                Button(
                    onClick = {
                        request.id?.let { // Safely use the request ID
                            adminViewModel.updateRequestStatus(it, "REJECTED")
                        }
                    },
                    enabled = request.status != "REJECTED" // Disable if already rejected
                ) {
                    Text("Reject")
                }
            }
        }
    }
}

================
File: app/src/main/java/com/group2/client/ui/screens/admin/DogDetailScreenAdmin.kt
================
// client/app/src/main/java/com/group2/client/ui/screens/admin/DogDetailScreenAdmin.kt

package com.group2.client.ui.screens.admin

import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.api.RetrofitClient
import com.group2.client.model.Dog
import com.group2.client.ui.navigation.Screen
import kotlinx.coroutines.launch
import coil.compose.AsyncImage
import com.group2.client.ui.viewmodel.AdminViewModel
import androidx.compose.runtime.livedata.observeAsState // Correct import


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DogDetailScreenAdmin(dogId: Long, navController: NavController, adminViewModel: AdminViewModel) {
    val coroutineScope = rememberCoroutineScope()
    var dog by remember { mutableStateOf<Dog?>(null) }
    var isLoading by remember { mutableStateOf(true) }
    var error by remember { mutableStateOf<String?>(null) }
    val adminError by adminViewModel.error.observeAsState() // observeAsState for LiveData

    LaunchedEffect(dogId) {
        coroutineScope.launch {
            isLoading = true
            error = null // Clear previous errors
            try{
                val response = RetrofitClient.instance.getDogById(dogId) // Use dogId
                if (response.isSuccessful) {
                    dog = response.body()?.data
                } else {
                    error = response.body()?.message ?: "Error fetching dog: ${response.code()}"
                }
            } catch (e: Exception){
                error = "Network error: ${e.localizedMessage}"
            } finally {
                isLoading = false
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Dog Details") },
                actions = {
                    IconButton(onClick = {
                        navController.navigate(Screen.AddEditDog.createRoute(dogId)) // Navigate to edit screen
                    }) {
                        Icon(Icons.Filled.Edit, contentDescription = "Edit Dog")
                    }
                    IconButton(onClick = {
                        coroutineScope.launch {
                            adminViewModel.deleteDog(dogId.toInt()) //delete dog, Use dogId.toInt()
                        }
                        navController.popBackStack() // Go back after deletion
                    }) {
                        Icon(Icons.Filled.Delete, contentDescription = "Delete Dog")
                    }
                }
            )
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding).fillMaxSize(), contentAlignment = Alignment.Center) { // Center content
                if (isLoading) {
                    CircularProgressIndicator()
                } else if (error != null) {
                    Text(error!!)
                } else if (adminError != null) { // Display ViewModel errors
                    Text(adminError!!, color = MaterialTheme.colorScheme.error) //Correct Text
                }else if (dog != null) {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp)
                    ) {
                        AsyncImage(
                            model = dog!!.imageUrl,
                            contentDescription = "Dog Image",
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(200.dp)
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text("Name: ${dog!!.name}", style = MaterialTheme.typography.headlineMedium)
                        Spacer(modifier = Modifier.height(8.dp))
                        Text("Breed: ${dog!!.breed}")
                        Text("Age: ${dog!!.age}")
                        Text("Gender: ${dog!!.gender}")
                        Text("Description: ${dog!!.description}")
                        Spacer(modifier = Modifier.height(16.dp))
                    }
                }else {
                    Text("Dog not found")
                }
            }
        }
    )
}

================
File: app/src/main/java/com/group2/client/ui/screens/LoginScreen.kt
================
package com.group2.client.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.compose.runtime.livedata.observeAsState
import androidx.lifecycle.LiveData
import com.group2.client.ui.viewmodel.SharedViewModel
import androidx.compose.runtime.livedata.observeAsState
import com.group2.client.ui.navigation.Screen
import androidx.compose.ui.text.input.VisualTransformation


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginScreen(navController: NavController, sharedViewModel: SharedViewModel) {
    var username by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    val isLoggedIn: Boolean by sharedViewModel.isLoggedIn.observeAsState(false)
    val userRole by sharedViewModel.userRole.observeAsState()
    val loading: Boolean by sharedViewModel.loading.observeAsState(false)

    // Observe loading state
    val isLoading by sharedViewModel.loading.observeAsState(initial = false)


    if (isLoggedIn) {
        // Navigate based on user role
        LaunchedEffect(userRole) { // Use LaunchedEffect to prevent multiple navigations
            when (userRole) {
                "ADMIN" -> navController.navigate(Screen.AdminHome.route) {
                    popUpTo(Screen.Login.route) { inclusive = true }
                }
                "USER" -> navController.navigate(Screen.UserHome.route) {
                    popUpTo(Screen.Login.route) { inclusive = true }
                }
                else -> { /* Handle unknown role or error */ }
            }
        }
    }

    // UI for the login screen
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("Login", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))

        OutlinedTextField(
            value = username,
            onValueChange = { username = it },
            label = { Text("Username") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Password") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))

        // Show loading indicator when loading
        if (isLoading) {
            CircularProgressIndicator()
            Spacer(modifier = Modifier.height(8.dp))
        }


        Button(
            onClick = remember { {
                sharedViewModel.login(username, password)
            } },
            enabled = !loading, // Disable the button when loading
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Login")
        }
        Spacer(modifier = Modifier.height(16.dp))

        // Navigate to Registration Scree
        TextButton(onClick = { navController.navigate(Screen.Register.route) }) {
            Text("Don't have an account? Register here")
        }
    }
}

================
File: app/src/main/java/com/group2/client/ui/screens/RegisterScreen.kt
================
//client/app/src/main/java/com/group2/client/ui/screens/RegisterScreen.kt
package com.group2.client.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.ui.viewmodel.SharedViewModel
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.text.input.PasswordVisualTransformation


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterScreen(navController: NavController, sharedViewModel: SharedViewModel) {
    var username by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var confirmPassword by remember { mutableStateOf("") }
    var role by remember { mutableStateOf("USER") } // Default to USER
    val loading: Boolean by sharedViewModel.loading.observeAsState(false)
    val registrationError by sharedViewModel.registrationError.observeAsState()  // Observe the error


    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("Register", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))

        OutlinedTextField(
            value = username,
            onValueChange = { username = it },
            label = { Text("Username") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("Email") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Password") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = confirmPassword,
            onValueChange = { confirmPassword = it },
            label = { Text("Confirm Password") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            RadioButton(
                selected = role == "USER",
                onClick = { role = "USER" }
            )
            Text("User")

            RadioButton(
                selected = role == "ADMIN",
                onClick = { role = "ADMIN" }
            )
            Text("Admin")
        }
        Spacer(modifier = Modifier.height(16.dp))

        // Display registration errors
        registrationError?.let { error ->
            Text(error, color = MaterialTheme.colorScheme.error)
            Spacer(modifier = Modifier.height(8.dp))
        }

        if (loading) {
            CircularProgressIndicator()
            Spacer(modifier = Modifier.height(8.dp))
        }

        Button(
            onClick = {
                if (password != confirmPassword) {
                    // You should show an error message here, not call register
                    sharedViewModel.register(
                        mapOf( // Pass all data
                            "username" to username,
                            "email" to email,
                            "password" to password,
                            "role" to role
                        )
                    )
                    return@Button // Stop execution if passwords don't match
                }

                val userData = mapOf(
                    "username" to username,
                    "email" to email,
                    "password" to password,
                    "role" to role
                )
                sharedViewModel.register(userData)
            },
            enabled = !loading,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Register")
        }
    }
}

================
File: app/src/main/java/com/group2/client/ui/screens/user/DogDetailScreenUser.kt
================
// client/app/src/main/java/com/group2/client/ui/screens/user/DogDetailScreenUser.kt (Corrected)
package com.group2.client.ui.screens.user

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.api.RetrofitClient
import com.group2.client.model.AdoptionRequest
import com.group2.client.model.Dog
import com.group2.client.ui.viewmodel.UserViewModel
import kotlinx.coroutines.launch
import coil.compose.AsyncImage
import androidx.compose.runtime.livedata.observeAsState // Correct import


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DogDetailScreenUser(dogId: Long, navController: NavController, userViewModel: UserViewModel) {
    val coroutineScope = rememberCoroutineScope()
    var dog by remember { mutableStateOf<Dog?>(null) }
    var isLoading by remember { mutableStateOf(true) }
    var error by remember { mutableStateOf<String?>(null) }
    val userId: Int? by userViewModel.userId.observeAsState() // Keep as Int?
    val userError by userViewModel.error.observeAsState()


    LaunchedEffect(dogId) {
        coroutineScope.launch {
            isLoading = true
            error = null
            try {
                val response = RetrofitClient.instance.getDogById(dogId) // Use dogId
                if (response.isSuccessful) {
                    dog = response.body()?.data
                } else {
                    error = response.body()?.message ?: "Error fetching dog: ${response.code()}"
                }
            } catch (e: Exception) {
                error = "Network error: ${e.localizedMessage}"
            } finally {
                isLoading = false
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("Dog Details") })
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding).fillMaxSize(), contentAlignment = Alignment.Center) { // Center content
                if (isLoading) {
                    CircularProgressIndicator()
                } else if (error != null) {
                    Text(error!!)
                } else if (userError != null){
                    Text(userError!!, color = MaterialTheme.colorScheme.error) //Correct Text
                }
                else if (dog != null) {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp)
                    ) {
                        AsyncImage(
                            model = dog!!.imageUrl,
                            contentDescription = "Dog Image",
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(200.dp)
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text("Name: ${dog!!.name}", style = MaterialTheme.typography.headlineMedium)
                        Spacer(modifier = Modifier.height(8.dp))
                        Text("Breed: ${dog!!.breed}")
                        Text("Age: ${dog!!.age}")
                        Text("Gender: ${dog!!.gender}")
                        Text("Description: ${dog!!.description}")
                        Spacer(modifier = Modifier.height(16.dp))

                        Button(onClick = {
                            // Create an adoption request, use let to handle null userId
                            userId?.let { uid ->
                                val adoptionRequest = AdoptionRequest(
                                    dogId = dog!!.id!!,
                                    userId = uid, // Use the non-null 'uid'
                                    userEmail = "",
                                )

                                coroutineScope.launch {
                                    userViewModel.createAdoptionRequest(adoptionRequest)
                                }
                                navController.popBackStack()
                            } ?: run {
                                // Handle null userId (shouldn't happen if logged in)
                                error = "User ID is null. Please log in again."
                            }

                        }, enabled = !(userViewModel.loading.value ?: false)) { // Corrected enabled check
                            Text("Adopt")
                        }
                    }
                } else {
                    Text("Dog not found")
                }
            }
        }
    )
}

================
File: app/src/main/java/com/group2/client/ui/screens/user/UserHomeScreen.kt
================
// client/app/src/main/java/com/group2/client/ui/screens/user/UserHomeScreen.kt (Modified)
package com.group2.client.ui.screens.user

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ExitToApp
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.material.icons.filled.ExitToApp
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.ui.components.DogCard
import com.group2.client.ui.viewmodel.UserViewModel
import com.group2.client.ui.navigation.Screen
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.runtime.LaunchedEffect
import com.group2.client.model.Dog
import com.group2.client.ui.viewmodel.SharedViewModel
import androidx.compose.ui.Alignment

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UserHomeScreen(navController: NavController, userViewModel: UserViewModel, sharedViewModel: SharedViewModel){
    val availableDogs: List<Dog> by userViewModel.availableDogs.observeAsState(initial = emptyList())
    val error: String? by userViewModel.error.observeAsState(initial = null)
    val loading: Boolean by userViewModel.loading.observeAsState(false)

    val username by sharedViewModel.username.observeAsState() // Get username


    // Fetch available dogs when the screen is created
    LaunchedEffect(Unit) {
        userViewModel.getAvailableDogs()
    }


    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(text = if(username != null) "Welcome, $username" else "Available Dogs") },
                actions = {
                    IconButton(onClick = {
                        sharedViewModel.logout()
                        navController.navigate(Screen.Login.route) {
                            popUpTo(navController.graph.startDestinationId) {
                                inclusive = true
                            }
                        }
                    }) {
                        Icon(imageVector = Icons.AutoMirrored.Filled.ExitToApp, contentDescription = "Logout")
                    }
                }
            )
        },
        floatingActionButton = {
            //Add request button and add dog button, horizontally
            FloatingActionButton(onClick = { navController.navigate(Screen.UserRequests.route)}) { // Added FAB
                Text("My Requests")
            }
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding).fillMaxSize(), contentAlignment = Alignment.Center) { // Center content

                if (loading) {
                    CircularProgressIndicator()
                }
                else{
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp)
                    ) {
                        error?.let {
                            Text(text = it, color = MaterialTheme.colorScheme.error) // Overload resolution ambiguity
                        }

                        if (availableDogs.isEmpty()) {
                            Text("No dogs available at the moment.")
                        } else {
                            LazyColumn {
                                items(availableDogs) { dog ->
                                    DogCard(dog = dog) {
                                        dog.id?.let{
                                            navController.navigate(Screen.DogDetailUser.createRoute(it.toLong()))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }
    )
}

================
File: app/src/main/java/com/group2/client/ui/screens/user/UserRequestsScreen.kt
================
// client/app/src/main/java/com/group2/client/ui/screens/user/UserRequestsScreen.kt (NEW FILE)

package com.group2.client.ui.screens.user

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.group2.client.model.AdoptionRequest
import com.group2.client.ui.viewmodel.UserViewModel
import androidx.compose.runtime.LaunchedEffect

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UserRequestsScreen(userViewModel: UserViewModel) {
    val requests: List<AdoptionRequest> by userViewModel.userAdoptionRequests.observeAsState(initial = emptyList())
    val error: String? by userViewModel.error.observeAsState()
    val loading: Boolean by userViewModel.loading.observeAsState(false)
    val userId: Int? by userViewModel.userId.observeAsState()

    // Fetch requests when the screen is displayed and userId is available
    LaunchedEffect(userId) {
        userId?.let {
            userViewModel.getAdoptionRequestsByUserId(it)
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("My Adoption Requests") })
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding).fillMaxSize(), contentAlignment = Alignment.Center) {
                if (loading) {
                    CircularProgressIndicator()
                } else {
                    error?.let {
                        Text(text = it, color = MaterialTheme.colorScheme.error)
                    }
                    if (requests.isEmpty()) {
                        Text("You have not made any adoption requests yet.")
                    } else {
                        LazyColumn {
                            items(requests) { request ->
                                UserRequestItem(request = request)
                            }
                        }
                    }
                }
            }
        }
    )
}

@Composable
fun UserRequestItem(request: AdoptionRequest) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = "Dog ID: ${request.dogId}", style = MaterialTheme.typography.titleMedium)
            Text(text = "Request Date: ${request.requestDate}")
            Text(text = "Status: ${request.status}")
        }
    }
}

================
File: app/src/main/java/com/group2/client/ui/theme/Color.kt
================
package com.group2.client.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

================
File: app/src/main/java/com/group2/client/ui/theme/Theme.kt
================
package com.group2.client.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun ClientTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
      dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
        val context = LocalContext.current
        if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
      }
      darkTheme -> DarkColorScheme
      else -> LightColorScheme
    }

    MaterialTheme(
      colorScheme = colorScheme,
      typography = Typography,
      content = content
    )
}

================
File: app/src/main/java/com/group2/client/ui/theme/Type.kt
================
package com.group2.client.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)

================
File: app/src/main/java/com/group2/client/ui/viewmodel/AdminViewModel.kt
================
// client/app/src/main/java/com/group2/client/ui/viewmodel/AdminViewModel.kt
package com.group2.client.ui.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.group2.client.api.RetrofitClient
import com.group2.client.model.AdoptionRequest
import com.group2.client.model.Dog
import com.group2.client.model.StatusUpdateRequest // Import
import kotlinx.coroutines.launch

class AdminViewModel : ViewModel() {

    private val _dogs = MutableLiveData<List<Dog>>()
    val dogs: LiveData<List<Dog>> = _dogs

    private val _requests = MutableLiveData<List<AdoptionRequest>>()
    val requests: LiveData<List<AdoptionRequest>> = _requests

    private val _error = MutableLiveData<String?>()
    val error: LiveData<String?> = _error

    private val _loading = MutableLiveData<Boolean>()
    val loading: LiveData<Boolean> get() = _loading

    init {
        getAllDogs()
        getAllAdoptionRequests()
    }

    fun getAllDogs() {
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                val response = RetrofitClient.instance.getAllDogs()
                if (response.isSuccessful) {
                    _dogs.value = response.body()?.data ?: emptyList()
                } else {
                    _error.value = response.body()?.message ?: "Error fetching dogs: ${response.code()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }

    fun getAllAdoptionRequests() {
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                val response = RetrofitClient.instance.getAllAdoptionRequests()
                if (response.isSuccessful) {
                    _requests.value = response.body()?.data ?: emptyList()
                } else {
                    _error.value = response.body()?.message ?: "Error fetching requests: ${response.code()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }

    fun createDog(dog: Dog) {
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                val response = RetrofitClient.instance.createDog(dog)
                if (response.isSuccessful) {
                    getAllDogs()
                } else {
                    _error.value = response.body()?.message ?: "Error creating dog: ${response.code()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.message}"
            } finally {
                _loading.value = false
            }
        }
    }

    fun updateDog(dog: Dog) {
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                dog.id?.let {
                    val response = RetrofitClient.instance.updateDog(it.toLong(), dog)
                    if (response.isSuccessful) {
                        getAllDogs()
                    } else {
                        _error.value = response.body()?.message ?: "Error updating dog: ${response.code()}"
                    }
                } ?: run {
                    _error.value = "Dog ID is null. Cannot update."
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.message}"
            } finally {
                _loading.value = false
            }
        }
    }

    fun deleteDog(dogId: Int) {
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                val response = RetrofitClient.instance.deleteDog(dogId.toLong())
                if (response.isSuccessful) {
                    getAllDogs()
                } else {
                    _error.value = response.body()?.message ?: "Error deleting dog: ${response.code()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.message}"
            } finally {
                _loading.value = false
            }
        }
    }

    fun updateRequestStatus(requestId: Int, newStatus: String) {
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                val request = StatusUpdateRequest(newStatus) // Create the request object
                val response = RetrofitClient.instance.updateAdoptionRequestStatus(requestId, request) // Pass object
                if (response.isSuccessful) {
                    getAllAdoptionRequests()
                } else {
                    _error.value = response.body()?.message ?: "Error updating request: ${response.code()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.message}"
            } finally {
                _loading.value = false
            }
        }
    }
}

================
File: app/src/main/java/com/group2/client/ui/viewmodel/SharedViewModel.kt
================
// client/app/src/main/java/com/group2/client/ui/viewmodel/SharedViewModel.kt
package com.group2.client.ui.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.group2.client.api.RetrofitClient
import kotlinx.coroutines.launch
import com.group2.client.model.ApiResponse // Import

class SharedViewModel : ViewModel() {
    private val _isLoggedIn = MutableLiveData(false)
    val isLoggedIn: LiveData<Boolean> = _isLoggedIn

    private val _userRole = MutableLiveData<String?>(null)
    val userRole: LiveData<String?> = _userRole

    private val _username = MutableLiveData<String?>(null) // Add username
    val username: LiveData<String?> = _username


    private val _loading = MutableLiveData<Boolean>()
    val loading: LiveData<Boolean> get() = _loading

    // Error handling for registration
    private val _registrationError = MutableLiveData<String?>()
    val registrationError: LiveData<String?> = _registrationError

    private val _loginError = MutableLiveData<String?>() // Login-specific error
    val loginError: LiveData<String?> = _loginError


    fun login(username: String,password: String) {
        viewModelScope.launch {
            _loading.value = true
            _loginError.value = null // Clear previous login errors
            try {
                // Pass credentials as a Map
                val response = RetrofitClient.instance.login(mapOf("username" to username, "password" to password))
                if (response.isSuccessful) {
                    val responseBody = response.body()?.data
                    if(responseBody != null){
                        _isLoggedIn.value = true
                        _userRole.value = responseBody["role"] as? String ?: "USER"
                        val userId = (responseBody["userId"] as? Number)?.toInt()  //Get Int
                        if( _userRole.value == "USER") {
                            userViewModel.setUserId(userId) // Now correctly passing Int?
                            if (userId != null) {
                                userViewModel.getAdoptionRequestsByUserId(userId) // Correctly passing Int
                            }
                        }
                        _username.value = responseBody["username"] as? String
                        RetrofitClient.setCredentials(username, password)
                    } else {
                        _loginError.value = response.body()?.message ?: "Login failed: ${response.code()}"
                        _isLoggedIn.value = false
                    }

                } else {
                    // Handle unsuccessful login
                    _loginError.value = response.body()?.message ?: "Login failed: ${response.code()}" // Set login error
                    _isLoggedIn.value = false
                    _userRole.value = null
                    _username.value = null;
                }
            } catch (e: Exception) {
                // _error.value = "Network error: ${e.localizedMessage}"
                _loginError.value = "Network error: ${e.message}" // Set login error
                _isLoggedIn.value = false // Ensure user is logged out
            } finally {
                _loading.value = false
            }
        }
    }
    fun logout() {
        _isLoggedIn.value = false
        _userRole.value = null
        _username.value = null
        userViewModel.setUserId(null) // Clear user ID
        RetrofitClient.clearCredentials() // Clear stored credentials
    }


    // Setter for UserViewModel instance
    fun setUserViewModel(viewModel: UserViewModel) {
        userViewModel = viewModel
    }

    // Keep a reference to the UserViewModel
    private lateinit var userViewModel: UserViewModel

    fun register(userData: Map<String, String>) {
        viewModelScope.launch {
            _loading.value = true
            _registrationError.value = null // Clear previous errors
            try {
                val response = RetrofitClient.instance.register(userData)
                if (response.isSuccessful) {
                    val apiResponse = response.body()
                    if (apiResponse != null && apiResponse.success) {
                        // Registration successful, you might navigate to login or show a success message
                        println("Registration Success: ${apiResponse.message}")
                        _registrationError.value = "Registration successful!  Please log in." // Or navigate
                    } else {
                        // Registration failed, handle the server's error message
                        val errorMessage = apiResponse?.message ?: "Unknown error"
                        println("Registration Failed: $errorMessage")
                        _registrationError.value = errorMessage
                    }
                } else {
                    // Handle non-successful HTTP responses (e.g., 400, 500)
                    val errorMessage = response.errorBody()?.string() ?: "Unknown error"
                    println("Registration Failed (HTTP): $errorMessage")
                    _registrationError.value = errorMessage
                }
            } catch (e: Exception) {
                // Handle network errors
                println("Registration Network Error: ${e.message}")
                _registrationError.value = "Network error: ${e.message}"
            } finally {
                _loading.value = false
            }
        }
    }
}

================
File: app/src/main/java/com/group2/client/ui/viewmodel/UserViewModel.kt
================
// client/app/src/main/java/com/group2/client/ui/viewmodel/UserViewModel.kt
package com.group2.client.ui.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.group2.client.api.RetrofitClient
import com.group2.client.model.AdoptionRequest
import com.group2.client.model.Dog
import kotlinx.coroutines.launch

class UserViewModel : ViewModel() {

    private val _availableDogs = MutableLiveData<List<Dog>>()
    val availableDogs: LiveData<List<Dog>> = _availableDogs

    private val _userAdoptionRequests = MutableLiveData<List<AdoptionRequest>>() // User's requests
    val userAdoptionRequests: LiveData<List<AdoptionRequest>> = _userAdoptionRequests

    private val _error = MutableLiveData<String?>() // Use nullable String
    val error: LiveData<String?> = _error

    private val _loading = MutableLiveData<Boolean>()
    val loading: LiveData<Boolean> get() = _loading

    private val _userId = MutableLiveData<Int?>() // Change to Int?
    val userId: LiveData<Int?> = _userId

    fun setUserId(id: Int?) { // Change to Int?
        _userId.value = id
    }

    init{
        getAvailableDogs()
    }

    fun getAvailableDogs() {
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                val response = RetrofitClient.instance.getAvailableDogs()
                if (response.isSuccessful) {
                    _availableDogs.value = response.body()?.data ?: emptyList()
                } else {
                    _error.value = response.body()?.message ?: "Error fetching dogs: ${response.code()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }
    fun getAdoptionRequestsByUserId(userId: Int) { // Change to Int
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                val response = RetrofitClient.instance.getAdoptionRequestsByUserId(userId)
                if (response.isSuccessful) {
                    _userAdoptionRequests.value = response.body()?.data ?: emptyList()
                } else {
                    _error.value = response.body()?.message ?: "Error fetching requests: ${response.code()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }
    fun createAdoptionRequest(request: AdoptionRequest) {
        viewModelScope.launch {
            _loading.value = true
            _error.value = null
            try {
                val response = RetrofitClient.instance.createAdoptionRequest(request)
                if (response.isSuccessful) {
                    userId.value?.let { getAdoptionRequestsByUserId(it) }
                } else {
                    _error.value = response.body()?.message ?: "Error creating request: ${response.code()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }
}

================
File: app/src/main/java/com/group2/client/util/constants.kt
================
package com.group2.client.util

object Constants {
    const val BASE_URL = "http://192.168.86.40:8080" // Use 10.0.2.2 for emulator
}

================
File: app/src/main/res/drawable/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

================
File: app/src/main/res/drawable/ic_launcher_foreground.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

================
File: app/src/main/res/values/strings.xml
================
<resources>
    <string name="app_name">Client</string>
</resources>

================
File: app/src/main/res/values/themes.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="Theme.Client" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

================
File: app/src/main/res/xml/backup_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================
File: app/src/main/res/xml/data_extraction_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================
File: app/src/test/java/com/group2/client/ExampleUnitTest.kt
================
package com.group2.client

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

================
File: build.gradle.kts
================
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
}

================
File: gradle.properties
================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

================
File: gradle/libs.versions.toml
================
[versions]
agp = "8.7.3"
kotlin = "2.0.0"
coreKtx = "1.15.0"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
lifecycleRuntimeKtx = "2.8.7"
activityCompose = "1.10.1"
composeBom = "2024.04.01"
runtimeLivedata = "1.7.8"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-runtime-livedata = { group = "androidx.compose.runtime", name = "runtime-livedata", version.ref = "runtimeLivedata" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

================
File: gradle/wrapper/gradle-wrapper.properties
================
#Mon Mar 17 14:54:03 SGT 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.9-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: gradlew
================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: settings.gradle.kts
================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "Client"
include(":app")



================================================================
End of Codebase
================================================================
