This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
client/.gitignore
client/.idea/.gitignore
client/.idea/.name
client/.idea/compiler.xml
client/.idea/deploymentTargetSelector.xml
client/.idea/gradle.xml
client/.idea/kotlinc.xml
client/.idea/migrations.xml
client/.idea/misc.xml
client/.idea/runConfigurations.xml
client/.idea/vcs.xml
client/app/.gitignore
client/app/build.gradle.kts
client/app/proguard-rules.pro
client/app/src/androidTest/java/com/group2/client/ExampleInstrumentedTest.kt
client/app/src/main/AndroidManifest.xml
client/app/src/main/java/com/group2/client/api/DogAdoptionApi.kt
client/app/src/main/java/com/group2/client/api/RetrofitClient.kt
client/app/src/main/java/com/group2/client/MainActivity.kt
client/app/src/main/java/com/group2/client/model/AdoptionRequest.kt
client/app/src/main/java/com/group2/client/model/ApiResponse.kt
client/app/src/main/java/com/group2/client/model/Dog.kt
client/app/src/main/java/com/group2/client/ui/components/DogCard.kt
client/app/src/main/java/com/group2/client/ui/components/ErrorMessage.kt
client/app/src/main/java/com/group2/client/ui/components/LoadingIndicator.kt
client/app/src/main/java/com/group2/client/ui/navigation/NavGraph.kt
client/app/src/main/java/com/group2/client/ui/navigation/Screen.kt
client/app/src/main/java/com/group2/client/ui/screens/admin/AddEditDogScreen.kt
client/app/src/main/java/com/group2/client/ui/screens/admin/AdminHomeScreen.kt
client/app/src/main/java/com/group2/client/ui/screens/admin/DogDetailScreenAdmin.kt
client/app/src/main/java/com/group2/client/ui/screens/LoginScreen.kt
client/app/src/main/java/com/group2/client/ui/screens/RegisterScreen.kt
client/app/src/main/java/com/group2/client/ui/screens/user/DogDetailScreenUser.kt
client/app/src/main/java/com/group2/client/ui/screens/user/UserHomeScreen.kt
client/app/src/main/java/com/group2/client/ui/theme/Color.kt
client/app/src/main/java/com/group2/client/ui/theme/Theme.kt
client/app/src/main/java/com/group2/client/ui/theme/Type.kt
client/app/src/main/java/com/group2/client/ui/viewmodel/AdminViewModel.kt
client/app/src/main/java/com/group2/client/ui/viewmodel/SharedViewModel.kt
client/app/src/main/java/com/group2/client/ui/viewmodel/UserViewModel.kt
client/app/src/main/java/com/group2/client/util/constants.kt
client/app/src/main/res/drawable/ic_launcher_background.xml
client/app/src/main/res/drawable/ic_launcher_foreground.xml
client/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
client/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
client/app/src/main/res/values/colors.xml
client/app/src/main/res/values/strings.xml
client/app/src/main/res/values/themes.xml
client/app/src/main/res/xml/backup_rules.xml
client/app/src/main/res/xml/data_extraction_rules.xml
client/app/src/test/java/com/group2/client/ExampleUnitTest.kt
client/build.gradle.kts
client/gradle.properties
client/gradle/libs.versions.toml
client/gradle/wrapper/gradle-wrapper.properties
client/gradlew
client/gradlew.bat
client/settings.gradle.kts
README.md
server/.gitattributes
server/.gitignore
server/build.gradle
server/gradle/wrapper/gradle-wrapper.properties
server/gradlew
server/gradlew.bat
server/settings.gradle
server/src/main/java/com/group2/server/config/PasswordConfig.java
server/src/main/java/com/group2/server/config/SecurityConfig.java
server/src/main/java/com/group2/server/controller/AdoptionRequestController.java
server/src/main/java/com/group2/server/controller/AuthController.java
server/src/main/java/com/group2/server/controller/DogController.java
server/src/main/java/com/group2/server/exception/GlobalExceptionHandler.java
server/src/main/java/com/group2/server/exception/ResourceNotFoundException.java
server/src/main/java/com/group2/server/model/AdoptionRequest.java
server/src/main/java/com/group2/server/model/ApiResponse.java
server/src/main/java/com/group2/server/model/Dog.java
server/src/main/java/com/group2/server/model/User.java
server/src/main/java/com/group2/server/repository/AdoptionRequestRepository.java
server/src/main/java/com/group2/server/repository/DogRepository.java
server/src/main/java/com/group2/server/repository/UserRepository.java
server/src/main/java/com/group2/server/ServerApplication.java
server/src/main/java/com/group2/server/service/AdoptionRequestService.java
server/src/main/java/com/group2/server/service/DogService.java
server/src/main/java/com/group2/server/service/UserService.java
server/src/main/resources/application.properties
server/src/test/java/com/group2/server/ServerApplicationTests.java

================================================================
Files
================================================================

================
File: client/.gitignore
================
*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties

================
File: client/.idea/.gitignore
================
# Default ignored files
/shelf/
/workspace.xml

================
File: client/.idea/.name
================
Client

================
File: client/.idea/compiler.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <bytecodeTargetLevel target="21" />
  </component>
</project>

================
File: client/.idea/deploymentTargetSelector.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="deploymentTargetSelector">
    <selectionStates>
      <SelectionState runConfigName="app">
        <option name="selectionMode" value="DROPDOWN" />
      </SelectionState>
    </selectionStates>
  </component>
</project>

================
File: client/.idea/gradle.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="GradleMigrationSettings" migrationVersion="1" />
  <component name="GradleSettings">
    <option name="linkedExternalProjectsSettings">
      <GradleProjectSettings>
        <option name="testRunner" value="CHOOSE_PER_TEST" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
        <option name="modules">
          <set>
            <option value="$PROJECT_DIR$" />
            <option value="$PROJECT_DIR$/app" />
          </set>
        </option>
        <option name="resolveExternalAnnotations" value="false" />
      </GradleProjectSettings>
    </option>
  </component>
</project>

================
File: client/.idea/kotlinc.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="KotlinJpsPluginSettings">
    <option name="version" value="2.0.0" />
  </component>
</project>

================
File: client/.idea/migrations.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectMigrations">
    <option name="MigrateToGradleLocalJavaHome">
      <set>
        <option value="$PROJECT_DIR$" />
      </set>
    </option>
  </component>
</project>

================
File: client/.idea/misc.xml
================
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/build/classes" />
  </component>
  <component name="ProjectType">
    <option name="id" value="Android" />
  </component>
</project>

================
File: client/.idea/runConfigurations.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RunConfigurationProducerService">
    <option name="ignoredProducers">
      <set>
        <option value="com.intellij.execution.junit.AbstractAllInDirectoryConfigurationProducer" />
        <option value="com.intellij.execution.junit.AllInPackageConfigurationProducer" />
        <option value="com.intellij.execution.junit.PatternConfigurationProducer" />
        <option value="com.intellij.execution.junit.TestInClassConfigurationProducer" />
        <option value="com.intellij.execution.junit.UniqueIdConfigurationProducer" />
        <option value="com.intellij.execution.junit.testDiscovery.JUnitTestDiscoveryConfigurationProducer" />
        <option value="org.jetbrains.kotlin.idea.junit.KotlinJUnitRunConfigurationProducer" />
        <option value="org.jetbrains.kotlin.idea.junit.KotlinPatternConfigurationProducer" />
      </set>
    </option>
  </component>
</project>

================
File: client/.idea/vcs.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
  </component>
</project>

================
File: client/app/.gitignore
================
/build

================
File: client/app/build.gradle.kts
================
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    namespace = "com.group2.client"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.group2.client"
        minSdk = 25
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.runtime.livedata)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)

    // Retrofit and Gson
    implementation("com.squareup.retrofit2:retrofit:2.11.0")
    implementation("com.squareup.retrofit2:converter-gson:2.11.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.12.0") // For logging network requests

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.1")

    // Lifecycle components
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7")
    implementation("androidx.lifecycle:lifecycle-runtime-compose:2.8.7")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.8.7")

    // Coil (Image Loading)
    implementation("io.coil-kt:coil-compose:2.7.0")

    // Navigation Compose
    implementation("androidx.navigation:navigation-compose:2.7.7")
}

================
File: client/app/proguard-rules.pro
================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================
File: client/app/src/androidTest/java/com/group2/client/ExampleInstrumentedTest.kt
================
package com.group2.client

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.group2.client", appContext.packageName)
    }
}

================
File: client/app/src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" >
    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:usesCleartextTraffic="true"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Client"
        tools:targetApi="31" >
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.Client" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

================
File: client/app/src/main/java/com/group2/client/api/DogAdoptionApi.kt
================
package com.group2.client.api

import com.group2.client.model.AdoptionRequest
import com.group2.client.model.Dog
import retrofit2.Response
import retrofit2.http.*
import com.group2.client.model.ApiResponse // Import ApiResponse

interface DogAdoptionApi {

    @GET("/api/dogs")
    suspend fun getAllDogs(): Response<List<Dog>>

    @GET("/api/dogs/available")
    suspend fun getAvailableDogs(): Response<List<Dog>>

    @GET("/api/dogs/{id}")
    suspend fun getDogById(@Path("id") dogId: Long): Response<Dog>

    @POST("/api/dogs")
    suspend fun createDog(@Body dog: Dog): Response<Dog>

    @PUT("/api/dogs/{id}")
    suspend fun updateDog(@Path("id") dogId: Long, @Body dog: Dog): Response<Dog>

    @DELETE("/api/dogs/{id}")
    suspend fun deleteDog(@Path("id") dogId: Long): Response<Unit>

    @POST("/api/requests")
    suspend fun createAdoptionRequest(@Body request: AdoptionRequest): Response<AdoptionRequest>

    @GET("/api/requests")
    suspend fun getAllAdoptionRequests(): Response<List<AdoptionRequest>>

    @GET("/api/requests/user/{userId}")
    suspend fun getAdoptionRequestsByUserId(@Path("userId") userId: Long): Response<List<AdoptionRequest>>

    @GET("/api/requests/{id}")
    suspend fun getAdoptionRequestById(@Path("id") requestId: Long): Response<AdoptionRequest>

    @PUT("/api/requests/{id}/status")
    suspend fun updateAdoptionRequestStatus(
        @Path("id") requestId: Long,
        @Body status: String
    ): Response<AdoptionRequest>

    // Corrected Login:  Remove @FormUrlEncoded, use @Body, and expect a Map
    @POST("/api/auth/login")
    suspend fun login(@Body credentials: Map<String, String>): Response<Map<String, Any>>

    @POST("/api/auth/register")
    suspend fun register(@Body userData: Map<String, String>): Response<ApiResponse<Void>> // Use ApiResponse<Void>
}

================
File: client/app/src/main/java/com/group2/client/api/RetrofitClient.kt
================
// client/app/src/main/java/com/group2/client/api/RetrofitClient.kt
package com.group2.client.api

import com.group2.client.util.Constants
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import okhttp3.Credentials // Import Credentials

object RetrofitClient {

    private var username = ""
    private var password = ""
    // No token needed for basic auth

    fun setCredentials(user: String, pass: String) {
        username = user
        password = pass
        // No need to reset a token
    }

    fun clearCredentials() {
        username = ""
        password = ""
        // No token to clear
    }

    private val okHttpClient = OkHttpClient.Builder()
        .addInterceptor { chain ->
            val original = chain.request()

            val requestBuilder = original.newBuilder().apply {
                // Always use Basic Auth if credentials are set
                if (username.isNotEmpty() && password.isNotEmpty()) {
                    header("Authorization", Credentials.basic(username, password))
                }
            }
                .method(original.method, original.body)

            val request = requestBuilder.build()
            chain.proceed(request)
        }
        .addInterceptor(HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY // Add logging interceptor
        })
        .build()

    val instance: DogAdoptionApi by lazy {
        val retrofit = Retrofit.Builder()
            .baseUrl(Constants.BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        retrofit.create(DogAdoptionApi::class.java)
    }
}

================
File: client/app/src/main/java/com/group2/client/MainActivity.kt
================
package com.group2.client

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import com.group2.client.ui.navigation.NavGraph
import com.group2.client.ui.theme.ClientTheme
import androidx.lifecycle.viewmodel.compose.viewModel
import com.group2.client.ui.viewmodel.SharedViewModel // Import SharedViewModel
import com.group2.client.ui.viewmodel.AdminViewModel
import com.group2.client.ui.viewmodel.UserViewModel


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ClientTheme {
                // Instantiate the SharedViewModel using viewModel()
                val sharedViewModel: SharedViewModel = viewModel()
                val adminViewModel: AdminViewModel = viewModel()
                val userViewModel: UserViewModel = viewModel()
                NavGraph(sharedViewModel = sharedViewModel, adminViewModel, userViewModel)
            }
        }
    }
}

================
File: client/app/src/main/java/com/group2/client/model/AdoptionRequest.kt
================
package com.group2.client.model

import com.google.gson.annotations.SerializedName
import java.time.LocalDateTime

data class AdoptionRequest(
    @SerializedName("id") val id: Long? = null, // ID can be null when creating a new request
    @SerializedName("dogId") val dogId: Long,
    @SerializedName("userId") val userId: Long,
    @SerializedName("requestDate") val requestDate: String? = null,
    @SerializedName("status") val status: String? = null,
    @SerializedName("userEmail") val userEmail: String,
)

================
File: client/app/src/main/java/com/group2/client/model/ApiResponse.kt
================
package com.group2.client.model

data class ApiResponse<T>(
    val success: Boolean,
    val message: String? = null,
    val data: T? = null
)

================
File: client/app/src/main/java/com/group2/client/model/Dog.kt
================
package com.group2.client.model

import com.google.gson.annotations.SerializedName

data class Dog(
    @SerializedName("id") val id: Long,
    @SerializedName("name") val name: String,
    @SerializedName("breed") val breed: String,
    @SerializedName("age") val age: Int,
    @SerializedName("gender") val gender: String,
    @SerializedName("description") val description: String,
    @SerializedName("imageUrl") val imageUrl: String,
    @SerializedName("available") val isAvailable: Boolean
)

================
File: client/app/src/main/java/com/group2/client/ui/components/DogCard.kt
================
package com.group2.client.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.group2.client.model.Dog
import coil.compose.AsyncImage

@Composable
fun DogCard(dog: Dog, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable(onClick = onClick), // Use clickable modifier here
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            AsyncImage( //Use Async
                model = dog.imageUrl,
                contentDescription = "Dog Image",
                modifier = Modifier
                    .size(80.dp)
                    .padding(end = 16.dp)
            )
            Column {
                Text(text = dog.name, style = MaterialTheme.typography.headlineSmall)
                Text(text = dog.breed, style = MaterialTheme.typography.bodyMedium)
            }
        }
    }
}

================
File: client/app/src/main/java/com/group2/client/ui/components/ErrorMessage.kt
================
// client/app/src/main/java/com/group2/client/ui/components/ErrorMessage.kt
package com.group2.client.ui.components

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun ErrorMessage(message: String) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = message,
            color = MaterialTheme.colorScheme.error,
            style = MaterialTheme.typography.bodyMedium
        )
    }
}

================
File: client/app/src/main/java/com/group2/client/ui/components/LoadingIndicator.kt
================
// client/app/src/main/java/com/group2/client/ui/components/LoadingIndicator.kt
package com.group2.client.ui.components

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier

@Composable
fun LoadingIndicator() {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        CircularProgressIndicator()
    }
}

================
File: client/app/src/main/java/com/group2/client/ui/navigation/NavGraph.kt
================
package com.group2.client.ui.navigation

import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.lifecycle.LiveData
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.group2.client.ui.screens.LoginScreen
import androidx.lifecycle.viewmodel.compose.viewModel
import com.group2.client.ui.viewmodel.SharedViewModel
import com.group2.client.ui.screens.admin.AdminHomeScreen
import com.group2.client.ui.viewmodel.AdminViewModel
import com.group2.client.ui.screens.user.UserHomeScreen
import com.group2.client.ui.viewmodel.UserViewModel
import androidx.navigation.NavType
import androidx.navigation.navArgument
import com.group2.client.ui.screens.user.DogDetailScreenUser
import com.group2.client.ui.screens.admin.AddEditDogScreen
import com.group2.client.ui.screens.admin.DogDetailScreenAdmin
import com.group2.client.ui.screens.RegisterScreen


@Composable
fun NavGraph(
    sharedViewModel: SharedViewModel = viewModel(),
    adminViewModel: AdminViewModel = viewModel(),
    userViewModel: UserViewModel = viewModel(),
) {
    val navController = rememberNavController()
    val isLoggedIn: Boolean by sharedViewModel.isLoggedIn.observeAsState(false)
    val userRole by sharedViewModel.userRole.observeAsState()

    // Pass the UserViewModel instance to the SharedViewModel
    sharedViewModel.setUserViewModel(userViewModel)

    NavHost(navController = navController, startDestination = Screen.Login.route) {
        composable(Screen.Login.route) {
            if (isLoggedIn) {
                if (userRole == "ADMIN") {
                    navController.navigate(Screen.AdminHome.route) {
                        popUpTo(Screen.Login.route) { inclusive = true }
                    }
                } else {
                    navController.navigate(Screen.UserHome.route) {
                        popUpTo(Screen.Login.route) { inclusive = true }
                    }
                }
            } else {
                LoginScreen(navController = navController, sharedViewModel = sharedViewModel)
            }
        }
        composable(Screen.UserHome.route) {
            UserHomeScreen(navController = navController, userViewModel = userViewModel, sharedViewModel = sharedViewModel)
        }
        composable(
            route = Screen.DogDetailUser.route,
            arguments = listOf(navArgument("dogId") { type = NavType.LongType })
        ) { backStackEntry ->
            val dogId = backStackEntry.arguments?.getLong("dogId") ?: -1L
            DogDetailScreenUser(dogId = dogId, navController = navController, userViewModel = userViewModel)
        }
        composable(Screen.AdminHome.route) {
            AdminHomeScreen(navController = navController, adminViewModel = adminViewModel, sharedViewModel = sharedViewModel)
        }
        composable(
            route = Screen.AddEditDog.route,
            arguments = listOf(navArgument("dogId") { type = NavType.LongType })
        ) { backStackEntry ->
            val dogId = backStackEntry.arguments?.getLong("dogId") ?: -1L
            AddEditDogScreen(dogId = dogId, navController = navController, adminViewModel = adminViewModel)
        }
        composable(
            route = Screen.DogDetailAdmin.route,
            arguments = listOf(navArgument("dogId") { type = NavType.LongType })
        ) {backStackEntry ->
            val dogId = backStackEntry.arguments?.getLong("dogId") ?: -1L
            DogDetailScreenAdmin(dogId = dogId, navController = navController, adminViewModel = adminViewModel)
        }
        composable(Screen.Register.route) {
            RegisterScreen(navController = navController, sharedViewModel = sharedViewModel)
        }
    }
}

================
File: client/app/src/main/java/com/group2/client/ui/navigation/Screen.kt
================
package com.group2.client.ui.navigation

sealed class Screen(val route: String) {
    object Login : Screen("login")
    object UserHome : Screen("user_home")
    object DogDetailUser : Screen("dog_detail_user/{dogId}") {
        fun createRoute(dogId: Long) = "dog_detail_user/$dogId"
    }
    object AdminHome : Screen("admin_home")
    object AddEditDog : Screen("add_edit_dog/{dogId}"){
        fun createRoute(dogId: Long) = "add_edit_dog/$dogId"
    }
    object DogDetailAdmin : Screen("dog_detail_admin/{dogId}"){
        fun createRoute(dogId: Long) = "dog_detail_admin/$dogId"
    }

    object Register : Screen("register") // Add a new screen for registration
}

================
File: client/app/src/main/java/com/group2/client/ui/screens/admin/AddEditDogScreen.kt
================
package com.group2.client.ui.screens.admin

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.api.RetrofitClient
import com.group2.client.model.Dog
import com.group2.client.ui.viewmodel.AdminViewModel
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddEditDogScreen(dogId: Long, navController: NavController, adminViewModel: AdminViewModel) {
    val coroutineScope = rememberCoroutineScope()
    var dog by remember { mutableStateOf(Dog(0, "", "", 0, "", "", "", true)) }
    var isLoading by remember { mutableStateOf(false) } // Local loading state
    var isEditMode by remember{ mutableStateOf(false)}

    LaunchedEffect(dogId) {
        if (dogId != -1L) { // Check if it's an edit operation
            isLoading = true // Set loading to true when fetching dog details
            isEditMode = true;
            coroutineScope.launch {
                try {
                    val response = RetrofitClient.instance.getDogById(dogId)
                    if (response.isSuccessful) {
                        dog = response.body() ?: Dog(0, "", "", 0, "", "", "",true)
                    } else {
                        // Handle error, e.g., show a message to the user
                        println("Error fetching dog: ${response.message()}")
                    }
                } catch (e: Exception) {
                    println("Network error: ${e.localizedMessage}")
                } finally {
                    isLoading = false // Set loading to false after fetching
                }
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text(if (isEditMode) "Edit Dog" else "Add Dog") })
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding)){
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    if (isLoading) {
                        CircularProgressIndicator()
                    } else {
                        OutlinedTextField(
                            value = dog.name,
                            onValueChange = { dog = dog.copy(name = it) },
                            label = { Text("Name") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.breed,
                            onValueChange = { dog = dog.copy(breed = it) },
                            label = { Text("Breed") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.age.toString(),
                            onValueChange = { dog = dog.copy(age = it.toIntOrNull() ?: 0) },
                            label = { Text("Age") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.gender,
                            onValueChange = { dog = dog.copy(gender = it) },
                            label = { Text("Gender") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.description,
                            onValueChange = { dog = dog.copy(description = it) },
                            label = { Text("Description") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        OutlinedTextField(
                            value = dog.imageUrl,
                            onValueChange = { dog = dog.copy(imageUrl = it) },
                            label = { Text("Image URL") },
                            modifier = Modifier.fillMaxWidth()
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Checkbox(
                                checked = dog.isAvailable,
                                onCheckedChange = { dog = dog.copy(isAvailable = it) }
                            )
                            Text("Available")
                        }

                        Spacer(modifier = Modifier.height(16.dp))
                        Button(onClick = {
                            isLoading = true // Set loading to true before making network call
                            coroutineScope.launch {
                                if (isEditMode) {
                                    adminViewModel.updateDog(dog) // update
                                } else {
                                    adminViewModel.createDog(dog) //create
                                }
                                navController.popBackStack() // Go back after the operation
                                isLoading = false // Reset loading after operation
                            }

                        }) {
                            Text(if (isEditMode) "Update Dog" else "Add Dog") //create or update
                        }
                    }
                }
            }
        }
    )
}

================
File: client/app/src/main/java/com/group2/client/ui/screens/admin/AdminHomeScreen.kt
================
package com.group2.client.ui.screens.admin

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.runtime.livedata.observeAsState
import androidx.lifecycle.LiveData
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ExitToApp
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.ui.components.DogCard
import com.group2.client.ui.navigation.Screen
import com.group2.client.ui.viewmodel.AdminViewModel
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import com.group2.client.ui.viewmodel.SharedViewModel
import androidx.compose.runtime.LaunchedEffect
import com.group2.client.model.Dog


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AdminHomeScreen(navController: NavController, adminViewModel: AdminViewModel, sharedViewModel: SharedViewModel){
    val dogs: List<Dog> by adminViewModel.dogs.observeAsState(initial = emptyList())
    val error: String? by adminViewModel.error.observeAsState(initial = null)
    val loading: Boolean by adminViewModel.loading.observeAsState(false)

    val username by sharedViewModel.username.observeAsState() // Get username


    // Fetch all dogs when the screen is created
    LaunchedEffect(Unit) {
        adminViewModel.getAllDogs()
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(text = if(username != null) "Welcome, $username" else "Admin Home") },
                actions = {
                    IconButton(onClick = {
                        sharedViewModel.logout()
                        navController.navigate(Screen.Login.route) {
                            popUpTo(navController.graph.startDestinationId) {
                                inclusive = true
                            }
                        }
                    }) {
                        Icon(imageVector = Icons.Default.ExitToApp, contentDescription = "Logout")
                    }
                }
            )
        },
        floatingActionButton = {
            FloatingActionButton(onClick = { navController.navigate(Screen.AddEditDog.createRoute(-1L)) }) {
                Icon(Icons.Filled.Add, contentDescription = "Add Dog")
            }
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding)){
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                ) {
                    if (loading) {
                        CircularProgressIndicator()
                    }

                    error?.let {
                        Text(text = it, color = MaterialTheme.colorScheme.error) // Overload resolution ambiguity
                    }

                    if (!loading && dogs.isEmpty()) {
                        Text("No dogs found.")
                    } else {
                        LazyColumn {
                            items(dogs) { dog ->
                                DogCard(dog = dog) {
                                    navController.navigate(Screen.DogDetailAdmin.createRoute(dog.id))
                                }
                            }
                        }
                    }
                }
            }
        }
    )
}

================
File: client/app/src/main/java/com/group2/client/ui/screens/admin/DogDetailScreenAdmin.kt
================
package com.group2.client.ui.screens.admin

import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.api.RetrofitClient
import com.group2.client.model.Dog
import com.group2.client.ui.navigation.Screen
import kotlinx.coroutines.launch
import coil.compose.AsyncImage
import com.group2.client.ui.viewmodel.AdminViewModel


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DogDetailScreenAdmin(dogId: Long, navController: NavController, adminViewModel: AdminViewModel) {
    val coroutineScope = rememberCoroutineScope()
    var dog by remember { mutableStateOf<Dog?>(null) }
    var isLoading by remember { mutableStateOf(true) }
    var error by remember { mutableStateOf<String?>(null) }

    LaunchedEffect(dogId) {
        coroutineScope.launch {
            isLoading = true
            try{
                val response = RetrofitClient.instance.getDogById(dogId)
                if (response.isSuccessful) {
                    dog = response.body()
                } else {
                    error = "Error fetching dog details: ${response.message()}"
                }
            } catch (e: Exception){
                error = "Network error: ${e.localizedMessage}"
            } finally {
                isLoading = false
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Dog Details") },
                actions = {
                    IconButton(onClick = {
                        navController.navigate(Screen.AddEditDog.createRoute(dogId)) // Navigate to edit screen
                    }) {
                        Icon(Icons.Filled.Edit, contentDescription = "Edit Dog")
                    }
                    IconButton(onClick = {
                        coroutineScope.launch {
                            adminViewModel.deleteDog(dogId) //delete dog
                        }
                        navController.popBackStack() // Go back after deletion
                    }) {
                        Icon(Icons.Filled.Delete, contentDescription = "Delete Dog")
                    }
                }
            )
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding)) {
                if (isLoading) {
                    CircularProgressIndicator()
                } else if (error != null) {
                    Text(error!!)
                }else if (dog != null) {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp)
                    ) {
                        AsyncImage(
                            model = dog!!.imageUrl,
                            contentDescription = "Dog Image",
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(200.dp)
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text("Name: ${dog!!.name}", style = MaterialTheme.typography.headlineMedium)
                        Spacer(modifier = Modifier.height(8.dp))
                        Text("Breed: ${dog!!.breed}")
                        Text("Age: ${dog!!.age}")
                        Text("Gender: ${dog!!.gender}")
                        Text("Description: ${dog!!.description}")
                        Spacer(modifier = Modifier.height(16.dp))
                    }
                }else {
                    Text("Dog not found")
                }
            }
        }
    )
}

================
File: client/app/src/main/java/com/group2/client/ui/screens/LoginScreen.kt
================
package com.group2.client.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.compose.runtime.livedata.observeAsState
import androidx.lifecycle.LiveData
import com.group2.client.ui.viewmodel.SharedViewModel
import androidx.compose.runtime.livedata.observeAsState
import com.group2.client.ui.navigation.Screen
import androidx.compose.ui.text.input.VisualTransformation


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginScreen(navController: NavController, sharedViewModel: SharedViewModel) {
    var username by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    val isLoggedIn: Boolean by sharedViewModel.isLoggedIn.observeAsState(false)
    val userRole by sharedViewModel.userRole.observeAsState()
    val loading: Boolean by sharedViewModel.loading.observeAsState(false)

    // Observe loading state
    val isLoading by sharedViewModel.loading.observeAsState(initial = false)


    if (isLoggedIn) {
        // Navigate based on user role
        LaunchedEffect(userRole) { // Use LaunchedEffect to prevent multiple navigations
            when (userRole) {
                "ADMIN" -> navController.navigate(Screen.AdminHome.route) {
                    popUpTo(Screen.Login.route) { inclusive = true }
                }
                "USER" -> navController.navigate(Screen.UserHome.route) {
                    popUpTo(Screen.Login.route) { inclusive = true }
                }
                else -> { /* Handle unknown role or error */ }
            }
        }
    }

    // UI for the login screen
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("Login", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))

        OutlinedTextField(
            value = username,
            onValueChange = { username = it },
            label = { Text("Username") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Password") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))

        // Show loading indicator when loading
        if (isLoading) {
            CircularProgressIndicator()
            Spacer(modifier = Modifier.height(8.dp))
        }


        Button(
            onClick = remember { {
                sharedViewModel.login(username, password)
            } },
            enabled = !loading, // Disable the button when loading
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Login")
        }
        Spacer(modifier = Modifier.height(16.dp))

        // Navigate to Registration Scree
        TextButton(onClick = { navController.navigate(Screen.Register.route) }) {
            Text("Don't have an account? Register here")
        }
    }
}

================
File: client/app/src/main/java/com/group2/client/ui/screens/RegisterScreen.kt
================
// client/app/src/main/java/com/group2/client/ui/screens/RegisterScreen.kt
package com.group2.client.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.ui.viewmodel.SharedViewModel
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.text.input.PasswordVisualTransformation


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterScreen(navController: NavController, sharedViewModel: SharedViewModel) {
    var username by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var confirmPassword by remember { mutableStateOf("") }
    var role by remember { mutableStateOf("USER") } // Default to USER
    val loading: Boolean by sharedViewModel.loading.observeAsState(false)
    val registrationError by sharedViewModel.registrationError.observeAsState()  // Observe the error


    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("Register", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))

        OutlinedTextField(
            value = username,
            onValueChange = { username = it },
            label = { Text("Username") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("Email") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Password") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = confirmPassword,
            onValueChange = { confirmPassword = it },
            label = { Text("Confirm Password") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            RadioButton(
                selected = role == "USER",
                onClick = { role = "USER" }
            )
            Text("User")

            RadioButton(
                selected = role == "ADMIN",
                onClick = { role = "ADMIN" }
            )
            Text("Admin")
        }
        Spacer(modifier = Modifier.height(16.dp))

        // Display registration errors
        registrationError?.let { error ->
            Text(error, color = MaterialTheme.colorScheme.error)
            Spacer(modifier = Modifier.height(8.dp))
        }

        if (loading) {
            CircularProgressIndicator()
            Spacer(modifier = Modifier.height(8.dp))
        }

        Button(
            onClick = {
                if (password != confirmPassword) {
                    sharedViewModel.register(
                        mapOf( // Pass all data
                            "username" to username,
                            "email" to email,
                            "password" to password,
                            "role" to role
                        )
                    )
                    return@Button
                }

                val userData = mapOf(
                    "username" to username,
                    "email" to email,
                    "password" to password,
                    "role" to role
                )
                sharedViewModel.register(userData)
            },
            enabled = !loading,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Register")
        }
    }
}

================
File: client/app/src/main/java/com/group2/client/ui/screens/user/DogDetailScreenUser.kt
================
package com.group2.client.ui.screens.user

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.api.RetrofitClient
import com.group2.client.model.AdoptionRequest
import com.group2.client.model.Dog
import com.group2.client.ui.viewmodel.UserViewModel
import kotlinx.coroutines.launch
import coil.compose.AsyncImage
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.livedata.observeAsState
import androidx.lifecycle.LiveData


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DogDetailScreenUser(dogId: Long, navController: NavController, userViewModel: UserViewModel) {
    val coroutineScope = rememberCoroutineScope()
    var dog by remember { mutableStateOf<Dog?>(null) }
    var isLoading by remember { mutableStateOf(true) }
    var error by remember { mutableStateOf<String?>(null) }
    val userId: Long? by userViewModel.userId.observeAsState(initial = null) // Use observeAsState for LiveData


    LaunchedEffect(dogId) {
        coroutineScope.launch {
            isLoading = true
            try {
                val response = RetrofitClient.instance.getDogById(dogId)
                if (response.isSuccessful) {
                    dog = response.body()
                } else {
                    error = "Error fetching dog details: ${response.message()}"
                }
            } catch (e: Exception) {
                error = "Network error: ${e.localizedMessage}"
            } finally {
                isLoading = false
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("Dog Details") })
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding)) {
                if (isLoading) {
                    CircularProgressIndicator()
                } else if (error != null) {
                    Text(error!!)
                } else if (dog != null) {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp)
                    ) {
                        AsyncImage(
                            model = dog!!.imageUrl,
                            contentDescription = "Dog Image",
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(200.dp)
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text("Name: ${dog!!.name}", style = MaterialTheme.typography.headlineMedium)
                        Spacer(modifier = Modifier.height(8.dp))
                        Text("Breed: ${dog!!.breed}")
                        Text("Age: ${dog!!.age}")
                        Text("Gender: ${dog!!.gender}")
                        Text("Description: ${dog!!.description}")
                        Spacer(modifier = Modifier.height(16.dp))

                        Button(onClick = {
                            // Create an adoption request

                            val adoptionRequest = AdoptionRequest(
                                dogId = dog!!.id,
                                userId = userId!!,
                                userEmail = "",
                            )

                            coroutineScope.launch {
                                userViewModel.createAdoptionRequest(adoptionRequest)
                            }
                            navController.popBackStack() //navigate back
                        }) {
                            Text("Adopt")
                        }
                    }
                } else {
                    Text("Dog not found")
                }
            }
        }
    )
}

================
File: client/app/src/main/java/com/group2/client/ui/screens/user/UserHomeScreen.kt
================
package com.group2.client.ui.screens.user

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items // IMPORT THIS!
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ExitToApp
import androidx.compose.runtime.livedata.observeAsState
import androidx.lifecycle.LiveData
import androidx.compose.material.icons.filled.ExitToApp
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
// No need to redefine observeAsState, it's already imported above
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.group2.client.ui.components.DogCard
import com.group2.client.ui.viewmodel.UserViewModel
import com.group2.client.ui.navigation.Screen
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.runtime.LaunchedEffect
import com.group2.client.model.Dog
import com.group2.client.ui.viewmodel.SharedViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UserHomeScreen(navController: NavController, userViewModel: UserViewModel, sharedViewModel: SharedViewModel){
    val availableDogs: List<Dog> by userViewModel.availableDogs.observeAsState(initial = emptyList())
    val error: String? by userViewModel.error.observeAsState(initial = null)
    val loading: Boolean by userViewModel.loading.observeAsState(false)

    val username by sharedViewModel.username.observeAsState() // Get username


    // Fetch available dogs when the screen is created
    LaunchedEffect(Unit) {
        userViewModel.getAvailableDogs()
    }


    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(text = if(username != null) "Welcome, $username" else "Available Dogs") },
                actions = {
                    IconButton(onClick = {
                        sharedViewModel.logout()
                        navController.navigate(Screen.Login.route) {
                            popUpTo(navController.graph.startDestinationId) {
                                inclusive = true
                            }
                        }
                    }) {
                        Icon(imageVector = Icons.AutoMirrored.Filled.ExitToApp, contentDescription = "Logout")
                    }
                }
            )
        },
        content = { innerPadding ->
            Box(modifier = Modifier.padding(innerPadding)) {
                if (loading) {
                    CircularProgressIndicator()
                }
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                ) {


                    error?.let {
                        Text(text = it, color = MaterialTheme.colorScheme.error) // Overload resolution ambiguity
                    }

                    if (!loading && availableDogs.isEmpty()) {
                        Text("No dogs available at the moment.")
                    } else {
                        LazyColumn {
                            items(availableDogs) { dog ->  //  Correctly iterate
                                DogCard(dog = dog) {
                                    navController.navigate(Screen.DogDetailUser.createRoute(dog.id))  // Pass dog.id (Long)
                                }
                            }
                        }
                    }
                }
            }

        }
    )
}

================
File: client/app/src/main/java/com/group2/client/ui/theme/Color.kt
================
package com.group2.client.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

================
File: client/app/src/main/java/com/group2/client/ui/theme/Theme.kt
================
package com.group2.client.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun ClientTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
      dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
        val context = LocalContext.current
        if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
      }
      darkTheme -> DarkColorScheme
      else -> LightColorScheme
    }

    MaterialTheme(
      colorScheme = colorScheme,
      typography = Typography,
      content = content
    )
}

================
File: client/app/src/main/java/com/group2/client/ui/theme/Type.kt
================
package com.group2.client.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)

================
File: client/app/src/main/java/com/group2/client/ui/viewmodel/AdminViewModel.kt
================
package com.group2.client.ui.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.group2.client.api.RetrofitClient
import com.group2.client.model.AdoptionRequest
import com.group2.client.model.Dog
import kotlinx.coroutines.launch

class AdminViewModel : ViewModel() {

    private val _dogs = MutableLiveData<List<Dog>>()
    val dogs: LiveData<List<Dog>> = _dogs

    private val _requests = MutableLiveData<List<AdoptionRequest>>()
    val requests: LiveData<List<AdoptionRequest>> = _requests

    private val _error = MutableLiveData<String>()
    val error: LiveData<String> = _error

    private val _loading = MutableLiveData<Boolean>()
    val loading: LiveData<Boolean> get() = _loading


    init {
        getAllDogs()
        getAllAdoptionRequests()
    }
    fun getAllDogs() {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.getAllDogs()
                if (response.isSuccessful && response.body() != null) {
                    _dogs.value = response.body()
                } else {
                    _error.value = "Error fetching dogs: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false // Ensure loading is set to false
            }
        }
    }

    fun getAllAdoptionRequests() {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.getAllAdoptionRequests()
                if (response.isSuccessful && response.body() != null) {
                    _requests.value = response.body()
                } else {
                    _error.value = "Error fetching requests: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false // Ensure loading is set to false
            }
        }
    }

    fun createDog(dog: Dog) {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.createDog(dog)
                if (response.isSuccessful && response.body() != null) {
                    // Refresh the dog list after successful creation
                    getAllDogs()
                } else {
                    _error.value = "Error creating dog: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }

    fun updateDog(dog: Dog) {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.updateDog(dog.id, dog)
                if (response.isSuccessful && response.body() != null) {
                    // Refresh the dog list after successful update
                    getAllDogs()
                } else {
                    _error.value = "Error updating dog: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }


    fun deleteDog(dogId: Long) {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.deleteDog(dogId)
                if (response.isSuccessful) {
                    // Refresh the dog list after successful deletion
                    getAllDogs()
                } else {
                    _error.value = "Error deleting dog: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }
    fun updateRequestStatus(requestId: Long, newStatus: String) {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.updateAdoptionRequestStatus(requestId, newStatus)
                if (response.isSuccessful) {
                    getAllAdoptionRequests() // Refresh the list after updating
                } else {
                    _error.postValue("Failed to update request status: ${response.message()}")
                }
            } catch (e: Exception) {
                _error.postValue("Network error: ${e.localizedMessage}")
            } finally {
                _loading.value = false
            }
        }
    }

}

================
File: client/app/src/main/java/com/group2/client/ui/viewmodel/SharedViewModel.kt
================
// client/app/src/main/java/com/group2/client/ui/viewmodel/SharedViewModel.kt
package com.group2.client.ui.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.group2.client.api.RetrofitClient
import kotlinx.coroutines.launch
import com.group2.client.model.ApiResponse // Import

class SharedViewModel : ViewModel() {
    private val _isLoggedIn = MutableLiveData(false)
    val isLoggedIn: LiveData<Boolean> = _isLoggedIn

    private val _userRole = MutableLiveData<String?>(null)
    val userRole: LiveData<String?> = _userRole

    private val _username = MutableLiveData<String?>(null) // Add username
    val username: LiveData<String?> = _username


    private val _loading = MutableLiveData<Boolean>()
    val loading: LiveData<Boolean> get() = _loading

    // Error handling for registration
    private val _registrationError = MutableLiveData<String?>()
    val registrationError: LiveData<String?> = _registrationError

    fun login(username: String,password: String) {
        viewModelScope.launch {
            _loading.value = true
            try {
                // Pass credentials as a Map
                val response = RetrofitClient.instance.login(mapOf("username" to username, "password" to password))
                if (response.isSuccessful && response.body() != null) {
                    val responseBody = response.body()!!
                    _isLoggedIn.value = true

                    // Extract role and userId (assuming the API returns these)
                    _userRole.value = responseBody["role"] as? String ?: "USER"
                    val userId = (responseBody["userId"] as? Number)?.toLong()

                    // Set the user ID in UserViewModel
                    if( _userRole.value == "USER") {
                        userViewModel.setUserId(userId) // Pass User View Model
                        userViewModel.getAdoptionRequestsByUserId(userId!!) //load user requests
                    }
                    _username.value = responseBody["username"] as? String //store the username

                    RetrofitClient.setCredentials(username, password) // Set credentials for subsequent requests
                    // Consider storing a token instead of credentials for better security

                } else {
                    // Handle unsuccessful login
                    _isLoggedIn.value = false
                    _userRole.value = null
                    _username.value = null;
                }
            } catch (e: Exception) {
                // _error.value = "Network error: ${e.localizedMessage}"
                _isLoggedIn.value = false // Ensure user is logged out
            } finally {
                _loading.value = false
            }
        }
    }
    fun logout() {
        _isLoggedIn.value = false
        _userRole.value = null
        RetrofitClient.clearCredentials() // Clear stored credentials
    }


    // Setter for UserViewModel instance
    fun setUserViewModel(viewModel: UserViewModel) {
        userViewModel = viewModel
    }

    // Keep a reference to the UserViewModel
    private lateinit var userViewModel: UserViewModel

    fun register(userData: Map<String, String>) {
        viewModelScope.launch {
            _loading.value = true
            _registrationError.value = null // Clear previous errors
            try {
                val response = RetrofitClient.instance.register(userData)
                if (response.isSuccessful) {
                    val apiResponse = response.body()
                    if (apiResponse != null && apiResponse.success) {
                        // Registration successful, you might navigate to login or show a success message
                        println("Registration Success: ${apiResponse.message}")
                        _registrationError.value = "Registration successful!  Please log in." // Or navigate
                    } else {
                        // Registration failed, handle the server's error message
                        val errorMessage = apiResponse?.message ?: "Unknown error"
                        println("Registration Failed: $errorMessage")
                        _registrationError.value = errorMessage
                    }
                } else {
                    // Handle non-successful HTTP responses (e.g., 400, 500)
                    val errorMessage = response.errorBody()?.string() ?: "Unknown error"
                    println("Registration Failed (HTTP): $errorMessage")
                    _registrationError.value = errorMessage
                }
            } catch (e: Exception) {
                // Handle network errors
                println("Registration Network Error: ${e.message}")
                _registrationError.value = "Network error: ${e.message}"
            } finally {
                _loading.value = false
            }
        }
    }
}

================
File: client/app/src/main/java/com/group2/client/ui/viewmodel/UserViewModel.kt
================
package com.group2.client.ui.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.group2.client.api.RetrofitClient
import com.group2.client.model.AdoptionRequest
import com.group2.client.model.Dog
import kotlinx.coroutines.launch

class UserViewModel : ViewModel() {

    private val _availableDogs = MutableLiveData<List<Dog>>()
    val availableDogs: LiveData<List<Dog>> = _availableDogs

    private val _userAdoptionRequests = MutableLiveData<List<AdoptionRequest>>() // User's requests
    val userAdoptionRequests: LiveData<List<AdoptionRequest>> = _userAdoptionRequests

    private val _error = MutableLiveData<String>()
    val error: LiveData<String> = _error

    private val _loading = MutableLiveData<Boolean>()
    val loading: LiveData<Boolean> get() = _loading


    private val _userId = MutableLiveData<Long?>()
    val userId: LiveData<Long?> = _userId

    fun setUserId(id: Long?) {
        _userId.value = id
    }

    init{
        getAvailableDogs()
    }

    fun getAvailableDogs() {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.getAvailableDogs()
                if (response.isSuccessful && response.body() != null) {
                    _availableDogs.value = response.body()
                } else {
                    _error.value = "Error fetching available dogs: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }
    fun getAdoptionRequestsByUserId(userId: Long) {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.getAdoptionRequestsByUserId(userId)
                if (response.isSuccessful && response.body() != null) {
                    _userAdoptionRequests.value = response.body()
                } else {
                    _error.value = "Error fetching user's requests: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }


    fun createAdoptionRequest(request: AdoptionRequest) {
        viewModelScope.launch {
            _loading.value = true
            try {
                val response = RetrofitClient.instance.createAdoptionRequest(request)
                if (response.isSuccessful && response.body() != null) {
                    // Optionally, refresh the user's adoption requests or show a success message
                    userId.value?.let { getAdoptionRequestsByUserId(it) } //refresh
                } else {
                    _error.value = "Error creating adoption request: ${response.message()}"
                }
            } catch (e: Exception) {
                _error.value = "Network error: ${e.localizedMessage}"
            } finally {
                _loading.value = false
            }
        }
    }
}

================
File: client/app/src/main/java/com/group2/client/util/constants.kt
================
package com.group2.client.util

object Constants {
    const val BASE_URL = "http://192.168.86.40:8080" // Use 10.0.2.2 for emulator
}

================
File: client/app/src/main/res/drawable/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

================
File: client/app/src/main/res/drawable/ic_launcher_foreground.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================
File: client/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: client/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: client/app/src/main/res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

================
File: client/app/src/main/res/values/strings.xml
================
<resources>
    <string name="app_name">Client</string>
</resources>

================
File: client/app/src/main/res/values/themes.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="Theme.Client" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

================
File: client/app/src/main/res/xml/backup_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================
File: client/app/src/main/res/xml/data_extraction_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================
File: client/app/src/test/java/com/group2/client/ExampleUnitTest.kt
================
package com.group2.client

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

================
File: client/build.gradle.kts
================
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
}

================
File: client/gradle.properties
================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

================
File: client/gradle/libs.versions.toml
================
[versions]
agp = "8.7.3"
kotlin = "2.0.0"
coreKtx = "1.15.0"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
lifecycleRuntimeKtx = "2.8.7"
activityCompose = "1.10.1"
composeBom = "2024.04.01"
runtimeLivedata = "1.7.8"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-runtime-livedata = { group = "androidx.compose.runtime", name = "runtime-livedata", version.ref = "runtimeLivedata" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

================
File: client/gradle/wrapper/gradle-wrapper.properties
================
#Mon Mar 17 14:54:03 SGT 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.9-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: client/gradlew
================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

================
File: client/gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: client/settings.gradle.kts
================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "Client"
include(":app")

================
File: README.md
================
# its181-vet-project
Full-stack vet application. Uses Spring Boot server and Android app client.

================
File: server/.gitattributes
================
/gradlew text eol=lf
*.bat text eol=crlf
*.jar binary

================
File: server/.gitignore
================
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/

================
File: server/build.gradle
================
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.group2'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	compileOnly 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'
	implementation 'org.springframework.security:spring-security-core:6.4.3'
	implementation 'org.springframework.security:spring-security-config:6.4.3'
	implementation 'org.springframework.security:spring-security-web:6.4.3'
}

tasks.named('test') {
	useJUnitPlatform()
}

================
File: server/gradle/wrapper/gradle-wrapper.properties
================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: server/gradlew
================
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

================
File: server/gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: server/settings.gradle
================
rootProject.name = 'server'

================
File: server/src/main/java/com/group2/server/config/PasswordConfig.java
================
package com.group2.server.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class PasswordConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

================
File: server/src/main/java/com/group2/server/config/SecurityConfig.java
================
package com.group2.server.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private UserDetailsService userDetailsService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(authz -> authz
                        // Public endpoints
                        .requestMatchers("/api/auth/**").permitAll()
                        .requestMatchers("/h2-console/**").permitAll()
                        .requestMatchers("/api/dogs/available").permitAll()
                        .requestMatchers(HttpMethod.GET, "/api/dogs", "/api/dogs/{id}").permitAll()

                        // Admin-only endpoints
                        .requestMatchers(HttpMethod.POST, "/api/dogs").hasAuthority("ADMIN")
                        .requestMatchers(HttpMethod.PUT, "/api/dogs/{id}").hasAuthority("ADMIN")
                        .requestMatchers(HttpMethod.DELETE, "/api/dogs/{id}").hasAuthority("ADMIN")
                        .requestMatchers("/api/requests/all").hasAuthority("ADMIN")
                        .requestMatchers("/api/requests/{id}/status").hasAuthority("ADMIN")
                        .requestMatchers("/api/users/**").hasAuthority("ADMIN")

                        // Authenticated user endpoints
                        .requestMatchers(HttpMethod.POST, "/api/requests").authenticated()
                        .requestMatchers("/api/requests/user/{userId}").authenticated()

                        // Default - require authentication
                        .anyRequest().authenticated()
                )
                .headers(headers -> headers.frameOptions(frameOptions -> frameOptions.disable()))
                .httpBasic(basic -> {});

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
        AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
        authenticationManagerBuilder
                .userDetailsService(userDetailsService)
                .passwordEncoder(passwordEncoder);
        return authenticationManagerBuilder.build();
    }
}

================
File: server/src/main/java/com/group2/server/controller/AdoptionRequestController.java
================
package com.group2.server.controller;

import com.group2.server.model.AdoptionRequest;
import com.group2.server.model.ApiResponse;
import com.group2.server.service.AdoptionRequestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/requests")
@CrossOrigin(origins = "*")
public class AdoptionRequestController {

    @Autowired
    private AdoptionRequestService adoptionRequestService;

    @PostMapping
    public ResponseEntity<ApiResponse<AdoptionRequest>> createAdoptionRequest(
            @RequestBody AdoptionRequest request,
            Authentication authentication) {
        try {
            AdoptionRequest createdRequest = adoptionRequestService.createAdoptionRequest(request, authentication);
            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(new ApiResponse<>(true, "Adoption request created successfully", createdRequest));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, e.getMessage(), null));
        }
    }

    @GetMapping("/all")
    public ResponseEntity<ApiResponse<List<AdoptionRequest>>> getAllAdoptionRequests() {
        List<AdoptionRequest> requests = adoptionRequestService.getAllAdoptionRequests();
        return ResponseEntity.ok(new ApiResponse<>(true, "All adoption requests retrieved", requests));
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<ApiResponse<List<AdoptionRequest>>> getAdoptionRequestsByUserId(
            @PathVariable Long userId,
            Authentication authentication) {
        try {
            List<AdoptionRequest> requests = adoptionRequestService.getAdoptionRequestsByUserId(userId, authentication);
            return ResponseEntity.ok(new ApiResponse<>(true, "User adoption requests retrieved", requests));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(new ApiResponse<>(false, e.getMessage(), null));
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<AdoptionRequest>> getAdoptionRequestById(
            @PathVariable Long id,
            Authentication authentication) {
        try {
            AdoptionRequest request = adoptionRequestService.getAdoptionRequestById(id, authentication);
            return ResponseEntity.ok(new ApiResponse<>(true, "Adoption request retrieved", request));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, e.getMessage(), null));
        }
    }

    @PutMapping("/{id}/status")
    public ResponseEntity<ApiResponse<AdoptionRequest>> updateAdoptionRequestStatus(
            @PathVariable Long id,
            @RequestBody String status) {
        try {
            AdoptionRequest updatedRequest = adoptionRequestService.updateAdoptionRequestStatus(id, status);
            return ResponseEntity.ok(new ApiResponse<>(true, "Adoption request status updated", updatedRequest));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, e.getMessage(), null));
        }
    }
}

================
File: server/src/main/java/com/group2/server/controller/AuthController.java
================
package com.group2.server.controller;

import com.group2.server.model.ApiResponse;
import com.group2.server.model.User;
import com.group2.server.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private UserService userService;

    @PostMapping("/login")
    public ResponseEntity<?> authenticateUser(@RequestBody Map<String, String> loginRequest) {
        try {
            String username = loginRequest.get("username");
            String password = loginRequest.get("password");

            if (username == null || password == null) {
                return ResponseEntity.badRequest()
                        .body(new ApiResponse<>(false, "Username and password are required", null));
            }

            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(username, password)
            );

            SecurityContextHolder.getContext().setAuthentication(authentication);

            org.springframework.security.core.userdetails.User principal =
                    (org.springframework.security.core.userdetails.User) authentication.getPrincipal();

            // Get the actual user entity
            User userDetails = userService.findByUsername(principal.getUsername())
                    .orElseThrow(() -> new BadCredentialsException("User details not found"));

            Map<String, Object> response = new HashMap<>();
            response.put("message", "Login successful");
            response.put("username", userDetails.getUsername());
            response.put("userId", userDetails.getId());
            response.put("role", userDetails.getRole());
            response.put("email", userDetails.getEmail());

            return ResponseEntity.ok(new ApiResponse<>(true, "Login successful", response));

        } catch (AuthenticationException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(new ApiResponse<>(false, "Invalid username or password", null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "Login failed: " + e.getMessage(), null));
        }
    }

    @PostMapping("/register")
    public ResponseEntity<ApiResponse<?>> registerUser(@RequestBody User user) {
        try {
            // Validation
            if (user.getUsername() == null || user.getPassword() == null || user.getEmail() == null) {
                return ResponseEntity.badRequest()
                        .body(new ApiResponse<>(false, "Username, password, and email are required", null));
            }

            // Check for duplicates
            if (userService.findByUsername(user.getUsername()).isPresent()) {
                return ResponseEntity.badRequest()
                        .body(new ApiResponse<>(false, "Username is already taken", null));
            }

            if (userService.findByEmail(user.getEmail()).isPresent()) {
                return ResponseEntity.badRequest()
                        .body(new ApiResponse<>(false, "Email is already in use", null));
            }

            // By default, register as regular user
            if (user.getRole() == null) {
                user.setRole("USER");
            }

            // Create the new user
            User newUser = userService.createUser(user);

            Map<String, Object> userData = new HashMap<>();
            userData.put("id", newUser.getId());
            userData.put("username", newUser.getUsername());
            userData.put("email", newUser.getEmail());
            userData.put("role", newUser.getRole());

            return ResponseEntity.ok(new ApiResponse<>(true, "User registered successfully", userData));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "Registration failed: " + e.getMessage(), null));
        }
    }
}

================
File: server/src/main/java/com/group2/server/controller/DogController.java
================
package com.group2.server.controller;

import com.group2.server.model.ApiResponse;
import com.group2.server.model.Dog;
import com.group2.server.service.DogService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/dogs")
@CrossOrigin(origins = "*")
public class DogController {

    @Autowired
    private DogService dogService;

    @GetMapping
    public ResponseEntity<ApiResponse<List<Dog>>> getAllDogs() {
        List<Dog> dogs = dogService.getAllDogs();
        return ResponseEntity.ok(new ApiResponse<>(true, "All dogs retrieved", dogs));
    }

    @GetMapping("/available")
    public ResponseEntity<ApiResponse<List<Dog>>> getAvailableDogs() {
        List<Dog> dogs = dogService.getAvailableDogs();
        return ResponseEntity.ok(new ApiResponse<>(true, "Available dogs retrieved", dogs));
    }

    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<Dog>> getDogById(@PathVariable Long id) {
        try {
            Dog dog = dogService.getDogById(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "Dog retrieved successfully", dog));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, e.getMessage(), null));
        }
    }

    @PostMapping
    public ResponseEntity<ApiResponse<Dog>> createDog(@RequestBody Dog dog) {
        try {
            // Validation
            if (dog.getName() == null || dog.getBreed() == null) {
                return ResponseEntity.badRequest()
                        .body(new ApiResponse<>(false, "Dog name and breed are required", null));
            }

            Dog createdDog = dogService.createDog(dog);
            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(new ApiResponse<>(true, "Dog created successfully", createdDog));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, e.getMessage(), null));
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<Dog>> updateDog(@PathVariable Long id, @RequestBody Dog dog) {
        try {
            Dog updatedDog = dogService.updateDog(id, dog);
            return ResponseEntity.ok(new ApiResponse<>(true, "Dog updated successfully", updatedDog));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, e.getMessage(), null));
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteDog(@PathVariable Long id) {
        try {
            dogService.deleteDog(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "Dog deleted successfully", null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, e.getMessage(), null));
        }
    }
}

================
File: server/src/main/java/com/group2/server/exception/GlobalExceptionHandler.java
================
package com.group2.server.exception;

import com.group2.server.model.ApiResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.util.logging.Logger;

@ControllerAdvice
public class GlobalExceptionHandler {

    private static final Logger logger = Logger.getLogger(GlobalExceptionHandler.class.getName());

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ApiResponse<Void>> handleResourceNotFoundException(ResourceNotFoundException ex) {
        logger.warning("Resource not found: " + ex.getMessage());
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(new ApiResponse<>(false, ex.getMessage(), null));
    }

    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<ApiResponse<Void>> handleBadCredentialsException(BadCredentialsException ex) {
        logger.warning("Authentication failure: " + ex.getMessage());
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body(new ApiResponse<>(false, "Invalid username or password", null));
    }

    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<ApiResponse<Void>> handleAccessDeniedException(AccessDeniedException ex) {
        logger.warning("Access denied: " + ex.getMessage());
        return ResponseEntity.status(HttpStatus.FORBIDDEN)
                .body(new ApiResponse<>(false, "Access denied: " + ex.getMessage(), null));
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ApiResponse<Void>> handleIllegalArgumentException(IllegalArgumentException ex) {
        logger.warning("Invalid argument: " + ex.getMessage());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(new ApiResponse<>(false, ex.getMessage(), null));
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<Void>> handleGenericException(Exception ex) {
        logger.severe("Unhandled exception: " + ex.getMessage());
        ex.printStackTrace();
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new ApiResponse<>(false, "An unexpected error occurred: " + ex.getMessage(), null));
    }
}

================
File: server/src/main/java/com/group2/server/exception/ResourceNotFoundException.java
================
package com.group2.server.exception;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

================
File: server/src/main/java/com/group2/server/model/AdoptionRequest.java
================
package com.group2.server.model;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDateTime;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class AdoptionRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long dogId;
    private Long userId;
    private LocalDateTime requestDate;
    private String status;
    private String userEmail;
}

================
File: server/src/main/java/com/group2/server/model/ApiResponse.java
================
// server/src/main/java/com/group2/server/model/ApiResponse.java
package com.group2.server.model;

import lombok.*;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ApiResponse<T> {
    private boolean success;
    private String message;
    private T data;
}

================
File: server/src/main/java/com/group2/server/model/Dog.java
================
package com.group2.server.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Dog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String breed;
    private Integer age;
    private String gender;
    private String description;
    private String imageUrl;
    private boolean isAvailable;
}

================
File: server/src/main/java/com/group2/server/model/User.java
================
package com.group2.server.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;
    private String password;
    private String role;
    private String email;

}

================
File: server/src/main/java/com/group2/server/repository/AdoptionRequestRepository.java
================
package com.group2.server.repository;

import com.group2.server.model.AdoptionRequest;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface AdoptionRequestRepository extends JpaRepository<AdoptionRequest, Long> {
    List<AdoptionRequest> findByUserId(Long userId);
}

================
File: server/src/main/java/com/group2/server/repository/DogRepository.java
================
package com.group2.server.repository;

import com.group2.server.model.Dog;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface DogRepository extends JpaRepository<Dog, Long> {
    List<Dog> findByIsAvailable(boolean isAvailable);
}

================
File: server/src/main/java/com/group2/server/repository/UserRepository.java
================
package com.group2.server.repository;

import com.group2.server.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    Optional<User> findByEmail(String email);
}

================
File: server/src/main/java/com/group2/server/ServerApplication.java
================
package com.group2.server;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(ServerApplication.class, args);
	}

}

================
File: server/src/main/java/com/group2/server/service/AdoptionRequestService.java
================
package com.group2.server.service;

import com.group2.server.exception.ResourceNotFoundException;
import com.group2.server.model.AdoptionRequest;
import com.group2.server.model.Dog;
import com.group2.server.model.User;
import com.group2.server.repository.AdoptionRequestRepository;
import com.group2.server.repository.DogRepository;
import com.group2.server.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class AdoptionRequestService {

    @Autowired
    private AdoptionRequestRepository adoptionRequestRepository;

    @Autowired
    private DogRepository dogRepository;

    @Autowired
    private UserRepository userRepository;

    public AdoptionRequest createAdoptionRequest(AdoptionRequest request, Authentication authentication) {
        // Validate dog exists and is available
        Dog dog = dogRepository.findById(request.getDogId())
                .orElseThrow(() -> new ResourceNotFoundException("Dog not found with id: " + request.getDogId()));

        if (!dog.isAvailable()) {
            throw new IllegalStateException("Dog is not available for adoption");
        }

        // Validate user exists
        User user = userRepository.findById(request.getUserId())
                .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + request.getUserId()));

        // Security check - ensure user is creating their own request or is admin
        String currentUsername = authentication.getName();
        User currentUser = userRepository.findByUsername(currentUsername)
                .orElseThrow(() -> new ResourceNotFoundException("Current user not found"));

        boolean isAdmin = authentication.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"));

        if (!currentUser.getId().equals(user.getId()) && !isAdmin) {
            throw new AccessDeniedException("You can only create adoption requests for yourself");
        }

        // Set default values
        request.setRequestDate(LocalDateTime.now());
        request.setStatus("PENDING");
        request.setUserEmail(user.getEmail());

        return adoptionRequestRepository.save(request);
    }

    public List<AdoptionRequest> getAllAdoptionRequests() {
        return adoptionRequestRepository.findAll();
    }

    public List<AdoptionRequest> getAdoptionRequestsByUserId(Long userId, Authentication authentication) {
        // Security check - ensure user is accessing their own requests or is admin
        String currentUsername = authentication.getName();
        User currentUser = userRepository.findByUsername(currentUsername)
                .orElseThrow(() -> new ResourceNotFoundException("Current user not found"));

        boolean isAdmin = authentication.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"));

        if (!currentUser.getId().equals(userId) && !isAdmin) {
            throw new AccessDeniedException("You can only access your own adoption requests");
        }

        return adoptionRequestRepository.findByUserId(userId);
    }

    public AdoptionRequest getAdoptionRequestById(Long id, Authentication authentication) {
        AdoptionRequest request = adoptionRequestRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Adoption request not found with id: " + id));

        // Security check - ensure user is accessing their own request or is admin
        String currentUsername = authentication.getName();
        User currentUser = userRepository.findByUsername(currentUsername)
                .orElseThrow(() -> new ResourceNotFoundException("Current user not found"));

        boolean isAdmin = authentication.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"));

        if (!currentUser.getId().equals(request.getUserId()) && !isAdmin) {
            throw new AccessDeniedException("You can only access your own adoption requests");
        }

        return request;
    }

    public AdoptionRequest updateAdoptionRequestStatus(Long id, String status) {
        AdoptionRequest request = adoptionRequestRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Adoption request not found with id: " + id));

        // Validate status
        status = status.trim().toUpperCase();
        if (!status.equals("PENDING") && !status.equals("APPROVED") && !status.equals("REJECTED")) {
            throw new IllegalArgumentException("Invalid status. Must be PENDING, APPROVED, or REJECTED");
        }

        // If status is changing to APPROVED, mark the dog as unavailable
        if (status.equals("APPROVED") && !request.getStatus().equals("APPROVED")) {
            Dog dog = dogRepository.findById(request.getDogId())
                    .orElseThrow(() -> new ResourceNotFoundException("Dog not found with id: " + request.getDogId()));

            dog.setAvailable(false);
            dogRepository.save(dog);
        }

        // If status is changing from APPROVED to something else, mark the dog as available again
        if (!status.equals("APPROVED") && request.getStatus().equals("APPROVED")) {
            Dog dog = dogRepository.findById(request.getDogId())
                    .orElseThrow(() -> new ResourceNotFoundException("Dog not found with id: " + request.getDogId()));

            dog.setAvailable(true);
            dogRepository.save(dog);
        }

        request.setStatus(status);
        return adoptionRequestRepository.save(request);
    }
}

================
File: server/src/main/java/com/group2/server/service/DogService.java
================
package com.group2.server.service;

import com.group2.server.model.Dog;
import com.group2.server.repository.DogRepository;
import com.group2.server.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class DogService {

    @Autowired
    private DogRepository dogRepository;

    public List<Dog> getAllDogs() {
        return dogRepository.findAll();
    }

    public List<Dog> getAvailableDogs() {
        return dogRepository.findByIsAvailable(true);
    }

    public Dog getDogById(Long id) {
        return dogRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Dog not found with id: " + id));
    }

    public Dog createDog(Dog dog) {
        return dogRepository.save(dog);
    }

    public Dog updateDog(Long id, Dog dogDetails) {
        Dog dog = getDogById(id);
        dog.setName(dogDetails.getName());
        dog.setBreed(dogDetails.getBreed());
        dog.setAge(dogDetails.getAge());
        dog.setGender(dogDetails.getGender());
        dog.setDescription(dogDetails.getDescription());
        dog.setImageUrl(dogDetails.getImageUrl());
        dog.setAvailable(dogDetails.isAvailable());
        return dogRepository.save(dog);
    }

    public void deleteDog(Long id) {
        Dog dog = getDogById(id);
        dogRepository.delete(dog);
    }
}

================
File: server/src/main/java/com/group2/server/service/UserService.java
================
package com.group2.server.service;

import com.group2.server.exception.ResourceNotFoundException;
import com.group2.server.model.User;
import com.group2.server.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Service
public class UserService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public User createUser(User user) {
        // Set default role if not provided
        if (user.getRole() == null || user.getRole().isEmpty()) {
            user.setRole("USER");
        }

        // Hash the password before saving
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public User getUserById(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + id));
    }

    public Optional<User> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }

    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                Collections.singleton(new SimpleGrantedAuthority(user.getRole()))
        );
    }

    public User updateUser(Long id, User userDetails) {
        User user = getUserById(id);
        user.setUsername(userDetails.getUsername());
        user.setEmail(userDetails.getEmail());

        // Only update password if provided
        if (userDetails.getPassword() != null && !userDetails.getPassword().isEmpty()) {
            user.setPassword(passwordEncoder.encode(userDetails.getPassword()));
        }

        // Only admin can change roles
        if (userDetails.getRole() != null && !userDetails.getRole().isEmpty()) {
            user.setRole(userDetails.getRole());
        }

        return userRepository.save(user);
    }

    public void deleteUser(Long id) {
        User user = getUserById(id);
        userRepository.delete(user);
    }
}

================
File: server/src/main/resources/application.properties
================
# Application configuration
spring.application.name=server
server.address=0.0.0.0
server.port=8080

# H2 Database Configuration
spring.datasource.url=jdbc:h2:mem:dogadoptiondb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# H2 Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true

# Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Logging
logging.level.org.springframework.security=DEBUG
logging.level.com.group2.server=DEBUG

# CORS Configuration (consider tightening this in production)
spring.mvc.cors.allowed-origins=*
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE
spring.mvc.cors.allowed-headers=*

# Server error handling
server.error.include-message=always
server.error.include-binding-errors=always

================
File: server/src/test/java/com/group2/server/ServerApplicationTests.java
================
package com.group2.server;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ServerApplicationTests {

	@Test
	void contextLoads() {
	}

}



================================================================
End of Codebase
================================================================
